<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文件切片上传</title>
      <link href="/2022/03/26/%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/26/%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 文件的 <code>split</code>属性切成blob,递归进行split chunk </p></blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>file<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">const</span> inputFile <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> uploadBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> chunkSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        uploadBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> upload<span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> file <span class="token operator">=</span> inputFile<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> fileName<span class="token punctuation">,</span> ext <span class="token punctuation">&#125;</span> <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>            <span class="token keyword">let</span> start <span class="token operator">=</span> index <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token keyword">const</span> blob <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span>            <span class="token keyword">const</span> blobName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ext<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>            <span class="token keyword">const</span> blobFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>blob<span class="token punctuation">]</span><span class="token punctuation">,</span> blobName<span class="token punctuation">)</span>            <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> blobFile<span class="token punctuation">)</span>            <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>                <span class="token literal-property property">body</span><span class="token operator">:</span> formData            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                index<span class="token operator">++</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>commit规范</title>
      <link href="/2022/03/25/commit%E8%A7%84%E8%8C%83/"/>
      <url>/2022/03/25/commit%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="commitizen-practice-demo"><a href="#commitizen-practice-demo" class="headerlink" title="commitizen-practice-demo"></a>commitizen-practice-demo</h1><p>Vue 项目 commitizen + husky + commitlint，git commit 提交信息规范校验 demo，<a href="https://www.conventionalcommits.org/en/v1.0.0/">conventional commits</a> 实践</p><ul><li><code>commitizen</code>：使用 git cz 代替 git commit，引导用户填写规范的 commit 信息</li><li><code>husky + commitlint</code>：git commit 动作时，校验 commit 信息，如果不满足 commitizen 规范，无法提交</li></ul><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install @vue&#x2F;cli -g # 安装 @vue&#x2F;clivue create comitizen-practice-demo# [Vue 3] typescript, router, vuex, eslint, unit-mocha) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="commitizen-使用"><a href="#commitizen-使用" class="headerlink" title="commitizen 使用"></a>commitizen 使用</h2><p><a href="https://github.com/commitizen/cz-cli">commitizen</a> 是一个 cli 工具，用于规范化 git commit 信息，可以代替 git commit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g commitizen cz-conventional-changelog  # 安装规范化提交插件echo &#39;&#123;&quot;path&quot;: &quot;cz-conventional-changelog&quot;&#125;&#39; &gt; ~&#x2F;.czrc # 配置git cz # ? Select the type of change that you&#39;re committing: docs:     Documentation only changes# ? What is the scope of this change (e.g. component or file name): (press enter to skip) readme# ? Write a short, imperative tense description of the change (max 86 chars):# (46) update readme.md, add init project description# ? Provide a longer description of the change: (press enter to skip) # ? Are there any breaking changes? No# ? Does this change affect any open issues? No# [main caae82e] docs(readme): update readme.md, add init project description# 1 file changed, 7 insertions(+)# zuo@zmac comitizen-practice-demo % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../assets/git_cz.png" alt="git_cz.png"></p><p>如图，git cz 运行后，会有如下 6 个步骤</p><h3 id="1-选择提交类型-必填"><a href="#1-选择提交类型-必填" class="headerlink" title="1.选择提交类型(必填)"></a>1.选择提交类型(必填)</h3><p>Select the type of change that you’re committing: (Use arrow keys)</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>A new feature</td></tr><tr><td>fix</td><td>A bug fix</td></tr><tr><td>docs</td><td>Documentation only changes</td></tr><tr><td>style</td><td>Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</td></tr><tr><td>refactor</td><td>A code change that neither fixes a bug nor adds a feature</td></tr><tr><td>perf</td><td>A code change that improves performance</td></tr><tr><td>test</td><td>Adding missing tests or correcting existing tests</td></tr><tr><td>build</td><td>Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)</td></tr><tr><td>ci</td><td>Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)</td></tr><tr><td>chore</td><td>Other changes that don’t modify src or test files</td></tr><tr><td>revert</td><td>Reverts a previous commit</td></tr></tbody></table><h3 id="2-选择-scope-模块名-选填"><a href="#2-选择-scope-模块名-选填" class="headerlink" title="2.选择 scope 模块名(选填)"></a>2.选择 scope 模块名(选填)</h3><p>What is the scope of this change (e.g. component or file name): (press enter to skip) </p><h3 id="3-填写精炼的提交信息-必填"><a href="#3-填写精炼的提交信息-必填" class="headerlink" title="3.填写精炼的提交信息(必填)"></a>3.填写精炼的提交信息(必填)</h3><p>Write a short, imperative tense description of the change (max 86 chars):</p><h3 id="4-填写补充信息-选填"><a href="#4-填写补充信息-选填" class="headerlink" title="4.填写补充信息(选填)"></a>4.填写补充信息(选填)</h3><p>Provide a longer description of the change: (press enter to skip) </p><h3 id="5-选择是否有破坏性更新-默认no"><a href="#5-选择是否有破坏性更新-默认no" class="headerlink" title="5.选择是否有破坏性更新(默认no)"></a>5.选择是否有破坏性更新(默认no)</h3><p>Are there any breaking changes?</p><h3 id="6-是否关联是-open-状态的-issue-默认no"><a href="#6-是否关联是-open-状态的-issue-默认no" class="headerlink" title="6.是否关联是 open 状态的 issue(默认no)"></a>6.是否关联是 open 状态的 issue(默认no)</h3><p>Does this change affect any open issues?</p><p>可以关闭 github issue，**但注意 commit 信息里面的末尾也要加 ‘(#issue编号)’**，这样在 github 体验更好</p><h2 id="docs-类型提交"><a href="#docs-类型提交" class="headerlink" title="docs 类型提交"></a>docs 类型提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 修改 README.mdgit add . # 添加到 gitgit cz # 提交# ? Select the type of change that you&#39;re committing: docs:     Documentation only changes# ? What is the scope of this change (e.g. component or file name): (press enter to skip) readme# ? Write a short, imperative tense description of the change (max 86 chars):# (46) update readme.md, add init project description# ? Provide a longer description of the change: (press enter to skip) # ? Are there any breaking changes? No# ? Does this change affect any open issues? No# [main caae82e] docs(readme): update readme.md, add init project description# 1 file changed, 7 insertions(+)# zuo@zmac comitizen-practice-demo % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看提交信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zuo@zmac comitizen-practice-demo % git logcommit caae82ec7beb66423f190ab86a6343447b250046 (HEAD -&gt; main)Author: zuoxiaobai &lt;guoqzuo@gmail.com&gt;Date:   Thu Oct 14 07:17:31 2021 +0800    docs(readme): update readme.md, add init project description<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fix-类型提交"><a href="#fix-类型提交" class="headerlink" title="fix 类型提交"></a>fix 类型提交</h2><p>在 github 仓库提交一个 issue，看是否提交 fix 时，可以关联这个 issue</p><p>创建一个 issue <code>#2</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git czcz-cli@4.2.4, cz-conventional-changelog@3.2.0# ? Select the type of change that you&#39;re committing: fix:      A bug fix# ? What is the scope of this change (e.g. component or file name): (press enter to skip) tests# ? Write a short, imperative tense description of the change (max 88 chars):#  (17) update tests (#2)# ? Provide a longer description of the change: (press enter to skip) # ? Are there any breaking changes? No# ? Does this change affect any open issues? No# [main 821cd42] fix(tests): update tests (#2)#  1 file changed, 2 insertions(+)#  fix(tests): update tests (#2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交时选择是否影响了 open 状态的 issue，如果选择了，github 会自动关闭该 issue</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zuo@zmac comitizen-practice-demo % git czcz-cli@4.2.4, cz-conventional-changelog@3.2.0# ? Select the type of change that you&#39;re committing: fix:      A bug fix# ? What is the scope of this change (e.g. component or file name): (press enter to skip) public# ? Write a short, imperative tense description of the change (max 87 chars):#  (28) auto close github issue test# ? Provide a longer description of the change: (press enter to skip) # ? Are there any breaking changes? No# ? Does this change affect any open issues? Yes# ? If issues are closed, the commit requires a body. Please enter a longer description of the commit itself:#  try to fix issue 2, just a msg# ? Add issue references (e.g. &quot;fix #123&quot;, &quot;re #123&quot;.):#  fix #2# [main 146e7b9] fix(public): auto close github issue test#  1 file changed, 1 insertion(+)# zuo@zmac comitizen-practice-demo % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：如果 commit 信息里面后面不加 (#issue编号)，git commit 表面是看不出来的，只有点击去才行</p><p>该提交会关闭 #2 issue，注意 issue 详情里会自动关联 commit 信息中有 #issue 编号的提交</p><h2 id="husky-commitlint-提交校验"><a href="#husky-commitlint-提交校验" class="headerlink" title="husky + commitlint 提交校验"></a>husky + commitlint 提交校验</h2><p><a href="https://github.com/conventional-changelog/commitlint">commitlint</a> 结合 husky 可以在 git commit 时校验 commit 信息是否符合规范</p><h3 id="husk-安装"><a href="#husk-安装" class="headerlink" title="husk 安装"></a>husk 安装</h3><ol><li>安装 husky</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install husky --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装 husky git hooks</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 方法1：npx husky install# 方法2：配置 package.json, scripts：&quot;prepare&quot;: &quot;husky install&quot;npm run prepare# husky - Git hooks installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试 husky 钩子作用，添加 pre-commit 钩子<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx husky add .husky&#x2F;pre-commit &quot;npm test&quot;# 查看当前目录 .husky 目录是否有生成 pre-commit 文件# 如果需要删除这个钩子，直接 删除 .husky&#x2F;pre-commit 文件即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="commitlint-安装配置"><a href="#commitlint-安装配置" class="headerlink" title="commitlint 安装配置"></a>commitlint 安装配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g @commitlint&#x2F;cli @commitlint&#x2F;config-conventional# Configure commitlint to use conventional configecho &quot;module.exports &#x3D; &#123;extends: [&#39;@commitlint&#x2F;config-conventional&#39;]&#125;&quot; &gt; commitlint.config.jsnpx husky add .husky&#x2F;commit-msg &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>测试<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git add .git commit -m &#39;xx&#39;zuo@zmac comitizen-practice-demo % git commit -m &#39;xxx&#39;# ⧗   input: xxx# ✖   subject may not be empty [subject-empty]# ✖   type may not be empty [type-empty]# ✖   found 2 problems, 0 warnings# ⓘ   Get help: https:&#x2F;&#x2F;github.com&#x2F;conventional-changelog&#x2F;commitlint&#x2F;#what-is-commitlint# husky - commit-msg hook exited with code 1 (error)# zuo@zmac comitizen-practice-demo % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>提示缺少 subject 就是提交信息、type 就是提交类型，按照规范提交就 ok 了<h2 id="根据-commit-信息生成-changelog"><a href="#根据-commit-信息生成-changelog" class="headerlink" title="根据 commit 信息生成 changelog"></a>根据 commit 信息生成 changelog</h2><h3 id="手动生成-changelog-不推荐"><a href="#手动生成-changelog-不推荐" class="headerlink" title="手动生成 changelog(不推荐)"></a>手动生成 changelog(不推荐)</h3>注意：该方法结合 npm version 时，生成会有问题，建议使用后面的 standard-version 自动生成，自动 tag，自动 commit<pre class="line-numbers language-none"><code class="language-none">$ npm install -g conventional-changelog-cli$ cd my-project$ conventional-changelog -p angular -i CHANGELOG.md -s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>注意：默认版本是 package.json 中的 version 参数: “version”: “0.1.0”, 如果版本变更，需要使用 npm version ‘版本号’，修改版本号，再生成<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm version 0.2.0 # 修改 package.json 版本号，并打一个 tag，待 push，commit 信息 0.0.2git push origin --tags # push tagsgit commit --amend -m &#39;feat(version):version to 0.2.0&#39; # commit 信息不对，导致生成 log 有问题，需要修改# 修上次提交记录，把 0.2.0 改为标准格式再生成，就可以生成 change log 了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>npm version 时加上比较好的注释试试<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zuo@zmac comitizen-practice-demo % npm version 0.4.0 -m &#39;feat(version):0.4.0 tag remark&#39;v0.4.0zuo@zmac comitizen-practice-demo % git logcommit 0fdcd82353f3907c4a31e470402b6dce743b4b11 (HEAD -&gt; main, tag: v0.4.0)Author: zuoxiaobai &lt;guoqzuo@gmail.com&gt;Date:   Fri Oct 15 06:58:20 2021 +0800    feat(version):0.4.0 tag remark# 再次生成 changelog 又不行了，空白<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="standard-version（自动生成、打tag）"><a href="#standard-version（自动生成、打tag）" class="headerlink" title="standard-version（自动生成、打tag）"></a>standard-version（自动生成、打tag）</h3><p>上面的例子中，npm run version 更新版本号会直接提交，导致且 commit 信息就是版本号，不符合 commitizen 规范。导致手动生成 log 时，会是空白。<a href="https://github.com/conventional-changelog/standard-version">standard-version</a> 就很好的解决了这个问题。安装后，只需要 npm run release，就可以有 npm run version 的功能，而且提交信息是标准的 commitizen 规范，而且自动生成 changelog 自动打 tag，自动 commit。你只需要 push 即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install standard-version --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scripts 设置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// scripts</span><span class="token string-property property">"release"</span><span class="token operator">:</span> <span class="token string">"standard-version"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zuo@zmac comitizen-practice-demo % npm run release&gt; comitizen-practice-demo@0.4.1 release &#x2F;Users&#x2F;zuo&#x2F;Desktop&#x2F;fecloe&#x2F;comitizen-practice-demo&gt; standard-version✔ bumping version in package.json from 0.4.1 to 0.4.2✔ bumping version in package-lock.json from 0.4.1 to 0.4.2✔ created CHANGELOG.md✔ outputting changes to CHANGELOG.md✔ committing package-lock.json and package.json and CHANGELOG.md✔ tagging release v0.4.2ℹ Run &#96;git push --follow-tags origin main&#96; to publishzuo@zmac comitizen-practice-demo %# git push# git push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：<strong>CHANGELOG.md 是追加写入内容的，如果你之前没有对应的内容或删了之前的内容，会导致生成的内容较少，或者不完整。</strong></p><h3 id="release-特定版本"><a href="#release-特定版本" class="headerlink" title="release 特定版本"></a>release 特定版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 0.4.1npm run release # 0.4.1 &#x3D;&gt; 0.4.2npm run release -- --prerelease # 0.4.2 to 0.4.3-0npm run release # 0.4.3-0 to 0.4.3npm run release -- --prerelease alpha # 0.4.3 to 0.4.4-alpha.0# patch、minor、majornpm run release -- --release-as minor  # 0.4.4-alpha.0 to 0.5.0npm run release -- --release-as patch # 0.5.0 to 0.5.1npm run release -- --release-as major # 0.5.1 to 1.0.0npm run release -- --release-as prepatch # 1.0.0 to 1.0.1-0npm run release -- --release-as preminor # 1.0.1-0 to 1.1.0-0npm run release -- --release-as premajor # 1.1.0-0 to 2.0.0-0# 手动指定版本npm run release -- --release-as 2.1.3-alpha.1 # 2.0.0-0 to 2.1.3-alpha.1# ✔ bumping version in package.json from 2.0.0-0 to 2.1.3-alpha.1# ✔ bumping version in package-lock.json from 2.0.0-0 to 2.1.3-alpha.1# ✔ tagging release v2.1.3-alpha.1npm run release # 2.1.3-alpha.1 to 2.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于版本号信息，参考 <a href="https://docs.npmjs.com/cli/v7/commands/npm-version">npm version</a> 文档:</p><blockquote><p>The newversion argument should be a valid semver string, a valid second argument to <a href="https://github.com/npm/node-semver#functions">semver.inc</a> (one of patch, minor, major, prepatch, preminor, premajor,</p></blockquote><h2 id="Project-setup-vue-x2F-cli生成，请忽略"><a href="#Project-setup-vue-x2F-cli生成，请忽略" class="headerlink" title="Project setup(@vue&#x2F;cli生成，请忽略)"></a>Project setup(@vue&#x2F;cli生成，请忽略)</h2><pre class="line-numbers language-none"><code class="language-none">npm install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Compiles-and-hot-reloads-for-development"><a href="#Compiles-and-hot-reloads-for-development" class="headerlink" title="Compiles and hot-reloads for development"></a>Compiles and hot-reloads for development</h3><pre class="line-numbers language-none"><code class="language-none">npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Compiles-and-minifies-for-production"><a href="#Compiles-and-minifies-for-production" class="headerlink" title="Compiles and minifies for production"></a>Compiles and minifies for production</h3><pre class="line-numbers language-none"><code class="language-none">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Run-your-unit-tests"><a href="#Run-your-unit-tests" class="headerlink" title="Run your unit tests"></a>Run your unit tests</h3><pre class="line-numbers language-none"><code class="language-none">npm run test:unit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Lints-and-fixes-files"><a href="#Lints-and-fixes-files" class="headerlink" title="Lints and fixes files"></a>Lints and fixes files</h3><pre class="line-numbers language-none"><code class="language-none">npm run lint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Customize-configuration"><a href="#Customize-configuration" class="headerlink" title="Customize configuration"></a>Customize configuration</h3><p>See <a href="https://cli.vuejs.org/config/">Configuration Reference</a>.</p>]]></content>
      
      
      <categories>
          
          <category> commitlint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commitlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React应用卡顿如何排查</title>
      <link href="/2022/03/23/React%E5%BA%94%E7%94%A8%E5%8D%A1%E9%A1%BF%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/03/23/React%E5%BA%94%E7%94%A8%E5%8D%A1%E9%A1%BF%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>排查组件性能瓶颈，重点放在React上，而不是通用的性能优化策略.</p></blockquote><ol><li><p>使用 <code>Performance</code> 录制应用快照，查看调用情况</p></li><li><p>查看<code>network</code>中网络请求情况，是否有资源因过大请求阻塞，导致后续资源无法加载，这种情况一般选择<strong>分包</strong>或<strong>固定资源选择cdn分担</strong>（多域名。浏览器设置的<code>http2.0</code>以下同域名仅允许同时最多6个tcp的限制）<br>可以通过 <code>React Developer Tools</code> 的 <code>Profiler</code> 的 <code>Flamegraph</code>（火焰图）或 <code>Ranked</code>（渲染时长排行榜） 查看各组件的渲染时长，根据对应的组件可以进行排查渲染问题，以下作答：</p></li></ol><ul><li><p>通过检查代码中是否有重复触发的 <code>useEffect</code></p></li><li><p>检查是否有多次不同渲染周期中触发的<code>setState</code>导致的渲染（比如在一个事件中导致的state更新，导致依赖于该state的useEffect触发，而该effect中又有其他的setState，导致多个有依赖项的useEffect不同批次连环触发）</p></li><li><p>检查是否在某个超大组件中需要渲染的元素过多，可使用子组件可考虑使用 <code>pureComponent</code>，或 <code>React.memo</code> ，或使用<code> useMemo</code>来根据依赖项更新子组件，或在父组件中将子组件需要的<code>props</code>通过使用<code>useMome</code>或<code>useCallback</code>缓存， 或在子组件中使用 <code>shouldComponentUpdate</code> 中校验是否需要更新来减少更新.</p></li><li><p>检查是否存在拖拽业务，这类业务一般会导致大量的<code>diff</code>存在，可以的话可以考虑不使用React的方式去实现，使用第三方非React的JS库去实现。</p></li><li><p>同上情况，存在大量增删改查逻辑，会导致大量的的diff可以检查列表元素是否存在唯一的<code>key</code>，通过key可以让React复用Fiber从而避免重复创建<code> Fiber</code>节点与 <code>Dom </code>节点</p></li><li><p>存在未清除掉的定时器或<code>dom</code>监听事件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首屏渲染白屏时间优化</title>
      <link href="/2022/03/23/%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/"/>
      <url>/2022/03/23/%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<ul><li>如何分析首屏加载CSR的性能？</li><li>分析后如何找出CSR性能瓶颈？</li><li>如何解决CSR性能瓶颈？</li><li>有没有其他渲染方案可以解决CSR当前问题，他的原理是什么？<blockquote><p>CSR(Client Side Rendering 客户端渲染)</p></blockquote></li></ul><h1 id="如何分析"><a href="#如何分析" class="headerlink" title="如何分析"></a>如何分析</h1><ul><li>network</li><li>performance</li><li>lighthouse</li><li>sentry</li><li><a href="https://webpagetest.org/">webPageTest</a></li></ul><h1 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h1><h2 id="网络层面："><a href="#网络层面：" class="headerlink" title="网络层面："></a>网络层面：</h2><p>从网络方面来讲，就是减少HTTP请求的次数，以及减小请求体积，这里就简单聊几点</p><ul><li>将多次请求合并到一次请求（ajax、精灵图，文件合并等）</li><li>页面懒加载应该也可以算在这个方面。</li><li>缓存住一些不经常改动的文件或内容将请求拦截（service worker）</li><li>文件内容压缩</li><li>静态资源CDN也是方式之一</li><li>升级到 http2</li><li>脚本的延迟执行</li><li>优化 CSS</li></ul><h2 id="渲染层面"><a href="#渲染层面" class="headerlink" title="渲染层面"></a>渲染层面</h2><ul><li>骨架屏，起码能让用户有打开了网页的感觉</li><li>图片懒加载</li><li>防抖节流</li><li>代码层面的改善吧，很有可能是某些坏代码产生的</li></ul><h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>就是将框架代码提前在服务端跑一遍，不过一般除非对SEO要求比较高或者你们公司比较有钱，否则不太会去使用，因为比较占用服务器的资源。</p><!-- ## 服务器与CDN的解决方式合理的配置资源缓存方式,以及选用靠谱的 `CDN` 服务。服务端启用`gzip`等压缩模式压缩这些静态资源加快传输## 静态资源优化## 脚本的加载执行**延迟非关键资源的加载，加速`css`传送。**我们可以在服务端启用http2加速资源的发送这样我们就可以节省一个RTT达到更快的解析渲染,确保第三方资源javascript的异步加载。比如你在使用element,antd这些 cdn 资源我们应该在`<script />`上设置async。`defer`就是上文说到的`blocking script`，async就是当 `HTML` 解析到开始加载他是无视DOM和渲染以及`onload`的。而现代浏览器的正确做法应该是使用DOM动态创建`script async`标签去加载资源。现有大部分的框架以及`bundle`工具都支持切割代码我们可以把这些资源都切割保证首屏的js足够轻量级。## 优化CSScss 的渲染取决于一组匹配选择器 不合理的选择器会导致解析过慢,css 选择器的解析顺序是从右到左，所以在面对复杂的 css 场景我们应该根据 Steve Souders大师总结的css选择器性能排行合理的选择方案达到更快的解析以及渲染   ## 采用SSR（同构渲染）上述是通用的资源响应解决手段。但是`csr`总归是有作为`csr`的局限性。这时候我们就得回归本质`ssr`在服务端解析出了所有的`dom`生成了`string`这样在访问的时候和`csr`需要解析在合成渲染是截然不同的,现代的ssr框架允许模块采用csr加载我们可以在首屏重要的部分进行`ssr`其他采用csr。合理的搭配我们的渲染结构。 -->]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Rxjs</title>
      <link href="/2022/03/22/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARxjs/"/>
      <url>/2022/03/22/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARxjs/</url>
      
        <content type="html"><![CDATA[<h1 id="入门基础"><a href="#入门基础" class="headerlink" title="入门基础"></a>入门基础</h1><h2 id="Observable-和-Observer"><a href="#Observable-和-Observer" class="headerlink" title="Observable 和 Observer"></a>Observable 和 Observer</h2><ul><li>Observable “可被观察者”</li><li>Observer “观察者”</li><li>连接两者的桥梁是 observable 对象的 函数 subscribe</li></ul><p>RxJS中的数据流就是Observable对象，Observable实现了下⾯两种设计模式：</p><ul><li>观察者模式（Observer Pattern）</li><li>迭代器模式（Iterator Pattern）</li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式要解决的问题，就是在一个持续产生事件的系统中，如何分割功能，让不同模块只需要处理一部分逻辑，这种分而治之的思想是基本的系统设计概念，当然，”分“很容易，关键是如何”治“。<br>观察者模式对“治”这个问题提的解决⽅法是这样，将逻辑分为发布者（<code>Publisher</code>）和观察者（<code>Observer</code>），其中发布者只管负责产⽣事件，它会通知所有注册挂上号的观察者，⽽不关⼼这些观察者如何处理这些事件， 相对的，观察者可以被注册上某个发布者，只管接收到事件之后就处理， ⽽不关⼼这些数据是如何产⽣的。</p><p>在RxJS的世界中，<code>Observable</code>对象是一个发布者，通过<code>observable</code>对象的<code>subscribe</code>，可以吧这个发布者和某个观察者<code>observe</code>连接起来。</p><p>在下面的代码中，<code>source$</code>是一个<code>Observable</code>对象，作为发布者，它产生的”事件“就是连续的三个整数：1，2，3</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Observable<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token keyword">import</span> ‘rxjs<span class="token operator">/</span>add<span class="token operator">/</span>observable<span class="token operator">/</span><span class="token keyword">of</span>'<span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扮演观察者<code>Observer</code>的是<code>console.log</code>函数，无论传入什么”事件“，它只管把”事件“输出到<code>console</code>上。</p><p>观察者模式的好处，这个模式的两方可以专心的做一件事，而且可以任意的组合，也就是，复杂的问题被分成三个小问题：</p><ol><li>如何产生事件，这是发布者的责任，在Rxjs中是Observable对象的工作。</li><li>如何响应事件，这是观察者的责任，在Rxjs中由subscribe的参数来决定。</li><li>什么样的发布者关联什么样的观察者，也就是何时调用subscribe。</li></ol><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>迭代器 指的是能够遍历一个数据集合的对象。也可称为”游标“，就像是一个移动的指针一样，从集合中的一个元素移到另一个元素，最后完成整个集合的遍历。</p><p>这个设计模式通常包含以下几个函数：</p><ul><li>getCurrent,获取当前被游标所指向的元素。</li><li>moveToNext，将游标移动到下一个元素，调用这个函数之后，getCurrent获得的元素就会不同。</li><li>isDone，判断是否已经遍历完了所有的元素。</li></ul><p>示例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> iterator<span class="token operator">=</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">getCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编程的世界中，所谓“拉”（<code>pull</code>）或者“推”（<code>push</code>），都是从数据消费者⾓度的描述，⽐如，在⽹页应⽤中，如果是⽹页主动通过AJAX请求从服务器获取数据，这是“拉”，如果⽹页和服务器建⽴了<code>websocket</code>通道，然后，不需要⽹页主动请求，服务器都可以通过websocket通道推送数据到 ⽹页中，这是“推”。在RxJS中，作为迭代器的使⽤者，并不需要主动去从Observable 中“拉”数据，⽽是只要subscribe上Observable对象之后，⾃然就能够收到消息的推送，这就是观察者模式和迭代器两种模式结合的强⼤之处。</p><h4 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h4><p>每个Observable对象，代表的就是一段时间范围内发生的一系列事件<br>Rxjs结合了观察者模式和迭代器模式，故： <code>Observable=publish+iterator</code><br>下面的代码创造和使用了一个简单的Observable对象：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Observable<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span><span class="token operator">=</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span><span class="token keyword">const</span> theObserver<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function-variable function">next</span><span class="token operator">:</span><span class="token parameter">item</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>theObserver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分析：</p></blockquote><ol><li>导入了Observable类</li><li>创造了函数onSubscribe,这个函数会被用作Observable构造函数的参数，这个函数参数完全决定了Observable对象的行为。onSubscribe函数接受一个名叫observer的参数，函数体内，调用参数observer的next函数，把数据”推“给observer。</li><li>调⽤Observable构造函数，产⽣⼀个名为source$的数据流对象。</li><li>创造观察者theObserver。</li><li>通过subscribe函数将theObserver和source$关联起来</li></ol><p>创建Observable对象也就是创建⼀个“发布者”，⼀个“观察者”调⽤某个Observable对象的subscribe函数，对应的<code>onSubscribe</code>函数就会被调⽤，参数就是“观察者”对象，<code>onSubscribe</code>函数中可以任意操作“观察者”对象。这个过程，就等于在这个Observable对象上挂了号，以后当这个Observable对象产⽣数据时，观察者就会获得通知。<br>在上⾯的代码中，“观察者”就是<code>theObserver</code>。在RxJS中，Observable是⼀个特殊类，它接受⼀个处理Observer的函数，⽽Observer就是⼀个普通的对象，没有什么神奇之处，对Observer对象的要求只有它必须包含⼀个名为<code>next</code>的属性，这个属性的值是⼀个函数， ⽤于接收被“推”过来的数据。</p><h3 id="跨域时间的Observable"><a href="#跨域时间的Observable" class="headerlink" title="跨域时间的Observable"></a>跨域时间的Observable</h3><p>Observer是被“推”数据的，在执⾏过程中处于被动地位，所以，异步操作，还是应该交给Observable来做，Observable既然能够“推”数据，那同时负责推送数据的节奏，天经地义，完全合理。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span><span class="token operator">=</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> number<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">const</span> handle<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="永无止境的Observable"><a href="#永无止境的Observable" class="headerlink" title="永无止境的Observable"></a>永无止境的Observable</h3><p>Observable可以产⽣<strong>⽆限多</strong>的数据。<br>Observable对象调用观察者<code>next</code>传递数据的动作，可以将产生动作的行为称为”吐出“<br>Observable对象每吐出一个数据，然后数据会被Observe消化处理掉，不会造成数据的堆积。现实中有很多数据流就是永无止境的，例如点击事件。但也有一些数据流是会终止的，那么如何终止数据流呢？<br>Observable会停止吐出数据，停止调用next函数推送数据，但是不会给Observe一个终止信号，Observe还在傻傻的等着接收Observable传来的数据，所以这样子还是不行，得需要一个宣称Observable终结的方式。</p><h3 id="Observable的终结"><a href="#Observable的终结" class="headerlink" title="Observable的终结"></a>Observable的终结</h3><p>此处需要使用到Observe的<code>complete</code>函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> theObserve<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function-variable function">next</span><span class="token operator">:</span><span class="token parameter">item</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'no more data'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改onSubscribe函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span><span class="token operator">=</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> number<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">const</span> handle<span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>number<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>        observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用Observe的complete函数</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Observe对象的complete函数何时调用，是有Observable对象决定的，所以完结信号是Observable”推“给Observe的。</p><h3 id="Observable的出错处理"><a href="#Observable的出错处理" class="headerlink" title="Observable的出错处理"></a>Observable的出错处理</h3><p>在Observable和Observer的交流渠道中增加一个新的函数<code>error</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Observable<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span><span class="token operator">=</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span><span class="token keyword">const</span> theObserve<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function-variable function">next</span><span class="token operator">:</span><span class="token parameter">item</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token function-variable function">error</span><span class="token operator">:</span><span class="token parameter">err</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'no more data'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>theObserver<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上输出结果为：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token number">1</span> something wrong<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>在Rxjs中，一个Observable对象只能有一个终结方式，要么出错，要么完结</strong></p><p>onSubscribe的参数observer并不是传给subscribe的参数theObserver，⽽是对theObserver的包装，所以，即使在<code>observer.error</code>被调⽤之后强⾏调⽤<code>observer.complete</code>，也不会真正调⽤到theObserver的complete函数。</p><h3 id="Observe的简单形式"><a href="#Observe的简单形式" class="headerlink" title="Observe的简单形式"></a>Observe的简单形式</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span> <span class="token parameter">item</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'no more data'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不处理异常行为，可以将第二个参数改为null。</p><h3 id="退订Observable"><a href="#退订Observable" class="headerlink" title="退订Observable"></a>退订Observable</h3><p>onSubscribe函数返回一个对象，对象包含<code>unsubscribe</code>函数，这个函数清除了<code>setInterval</code>产生的效果。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span> <span class="token operator">=</span> <span class="token parameter">observer</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>   <span class="token function-variable function">unsubscribe</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token function">clearInterval</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span><span class="token keyword">const</span> subscription<span class="token operator">=</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3500</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然unsubscribe函数调⽤之后，作为Observer不再接受到被推送的数据，但是作为Observable的source$并没有终结，因为始终没有调⽤<code>complete</code>，只不过它再也不会调⽤next函数了。<br><strong>Observable产⽣的事件，只有Observer通过subscribe订阅之后才会收到，在unsubscribe之后就不会再收到。</strong></p><h3 id="Hot-Observable-和-Cold-Observable"><a href="#Hot-Observable-和-Cold-Observable" class="headerlink" title="Hot Observable 和 Cold Observable"></a>Hot Observable 和 Cold Observable</h3><p>假设有这样的场景，⼀个Observable对象有两个Observer对象来订阅，⽽且这两个Observer对象并不是同时订阅，第⼀个Observer对象订阅N秒钟之后，第⼆个Observer对象才订阅同⼀个Observable对象，⽽且，在这N秒钟之内，Observable对象已经吐出了⼀些数据。现在问题来了，后订阅上的Observer，是不是应该接收到“错过”的那些数据呢？</p><ul><li>选择A：错过就错过了，只需要接受从订阅那⼀刻开始Observable产⽣的数据就⾏。</li><li>选择B：不能错过，需要获取Observable之前产⽣的数据。</li></ul><p>选择A，称这样的Observable为<code>Hot Observable</code><br>选择B，称之为<code>ColdObservable。</code></p><h3 id="Hot-Observable"><a href="#Hot-Observable" class="headerlink" title="Hot Observable"></a>Hot Observable</h3><p>对于⼀个HotObservable，概念上是有⼀个独⽴于Observable对象的“⽣产者”，这个“⽣产者”的创建和subscribe调⽤没有关系，subscribe调⽤只是让Observer连接上“⽣产者”⽽已，</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> producer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> hot$<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">//然后让observer去接收producer产生的数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cold-Observable"><a href="#Cold-Observable" class="headerlink" title="Cold Observable"></a>Cold Observable</h3><p>如果设想有⼀个数据“⽣产者”（producer）的⾓⾊，那么，对于Cold Observable，每⼀次订阅，都会产⽣⼀个新的“⽣产者”。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> cold$<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> producer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//然后让observer去接收producer产生的数据</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><p>对于现实中复杂的问题，并不会创造⼀个数据流之后就直接通过subscribe接上⼀个Observer，往往需要对这个数据流做⼀系列处理，然后才交给Observer。就像⼀个管道，数据从管道的⼀段流⼊，途径管道各个环节，当数据到达Observer的时候，已经被管道操作过，有的数据已经被中途过滤抛弃掉了，有的数据已经被改变了原来的形态，⽽且最后的数据可能来⾃多个数据源，最后Observer只需要处理能够⾛到终点的数据。</p><blockquote><p>在RxJS中，有⼀系列⽤于产⽣Observable函数，这些函数有的凭空创造Observable对象，有的根据外部数据源产⽣Observable对象，更多的是根据其他的Observable中的数据来产⽣新的Observable对象，也就是把上游数据转化为下游数据，所有这些函数统称为操作符。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Observable<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token keyword">import</span> <span class="token string">'rxjs/add/operator/map'</span><span class="token keyword">const</span> <span class="token function-variable function">onSubscribe</span><span class="token operator">=</span><span class="token parameter">observer</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>onSubscribe<span class="token punctuation">)</span>source$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token operator">=></span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>create可以创造Observable对象,每⼀个操作符都是创造⼀个新的Observable对象，不会对上游的Observable对象做任何修改，符合函数式编程的”数据不可变“要求,操作符就是⽤来产⽣全新Observable对象的函数</strong></p><p>操作符</p><h3 id="操作符分类"><a href="#操作符分类" class="headerlink" title="操作符分类"></a>操作符分类</h3><ul><li>功能分类</li><li>创建类</li><li>转化类</li><li>过滤类</li><li>合并类</li><li>多播类</li><li>错误处理类</li><li>辅助工具类</li><li>条件分支类</li><li>数字和合计类</li><li>背压控制类</li><li>可连接类</li><li>高阶Observable处理类</li><li>静态和实例分类</li></ul><p>所有的操作符都是函数，不过有的操作符是Observable类的静态函数，也就是不需要Observable实例就可以执⾏的函数，所以称为“<strong>静态操作符</strong>”；</p><p>例如of:<br><code>Observable.of=functionToImplementOf;</code><br>在使用方式上：<br><code>const source$=Observable.of(/*一些参数*/);</code></p><p>另⼀类操作符是Observable的实例函数，前提是要有⼀个创建好的Observable对象，这⼀类称为“<strong>实例操作符</strong>”。 比如<code>map</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Observable</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>map<span class="token operator">=</span>functionToImplementMap<span class="token punctuation">;</span><span class="token keyword">const</span> result$ <span class="token operator">=</span> source$<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token comment">/*一些参数*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建类操作符"><a href="#创建类操作符" class="headerlink" title="创建类操作符"></a>创建类操作符</h2><p>创建类操作符可以凭空创建Observable，并且不需要从其他Observable中获取数据，所以在数据管道中，创建类操作符是数据流的源头。<br>创建同步数据流<br>也可以称为同步Observable，需要关心的是：<br>产生哪些数据<br>数据之间的先后顺序如何<br><code>create</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Observable<span class="token punctuation">.</span><span class="token function-variable function">create</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">subscribe</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>subscribe<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="of-列举数据"><a href="#of-列举数据" class="headerlink" title="of 列举数据"></a>of 列举数据</h2><p>利用of操作符可以创建指定数据集合的Observable对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Observable<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/Observable'</span><span class="token keyword">import</span> <span class="token string">'rxjs/add/Observable/of'</span><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">///////////或者///////////////</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span><span class="token keyword">of</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/observable/of'</span><span class="token keyword">const</span> source$<span class="token operator">=</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>of吐出的数据 1，2，3是同步输出的，没有时间间隔，of 产生的Cold Observable,对于每一个Observer都会重复吐出同样的一组数据，所以可以反复使用。</p><h2 id="range-指定范围"><a href="#range-指定范围" class="headerlink" title="range 指定范围"></a>range 指定范围</h2><p>产生一个从1到100所有正整数的Observable对象：</p><p><code>const source$=Observable.range(1,100)</code><br>range也是同步的方式，一次性将100个数据都推给Observe</p><h2 id="generate-循环创建"><a href="#generate-循环创建" class="headerlink" title="generate 循环创建"></a>generate 循环创建</h2><p>generate类似于for循环</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> source$ <span class="token operator">=</span> Observable<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>   <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 初始值，相当于for循环中的i=2 </span>  <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment">//继续的条件，相当于for中的条件判断</span>  <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">//每次值的递增 </span>  <span class="token parameter">value</span> <span class="token operator">=></span> value <span class="token operator">*</span> value <span class="token comment">// 产⽣的结果 </span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="repeat-重复数据的数据流"><a href="#repeat-重复数据的数据流" class="headerlink" title="repeat 重复数据的数据流"></a>repeat 重复数据的数据流</h2><p>repeat 的 功能是可以重复上游Observable中的数据若干次。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">const</span> repeated$<span class="token operator">=</span>source$<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>source$</code>产生的Observable对象会产生1、2、3三个数据，这个Observable对象是<code>repeated$</code>的上游，理由repeat操作符，重复source$内容10遍。<br>repeat重复功能是基于上游的完结时机的，如果上游没有完结，那么使用repeat是完全没有意义的。</p><h2 id="empty-、-never-、-throw"><a href="#empty-、-never-、-throw" class="headerlink" title="empty 、 never 、 throw"></a>empty 、 never 、 throw</h2><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p>empty产生一个直接完结的Observable对象，没有参数，不产生任何数据。<br><code>const source$=Observable.empty()</code></p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>throw产生的Observable对象也是什么都不做，直接出错，抛出错误就是throw的参数。<br><code>const source$=Observable.throw(New Error(&#39;Oops&#39;))</code></p><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>什么也不做，不吐出数据，不完结，不产生错误，就这么待着，到永远。<br><code>const source$=Observable.never()</code></p><h2 id="创建异步数据的Observable对象"><a href="#创建异步数据的Observable对象" class="headerlink" title="创建异步数据的Observable对象"></a>创建异步数据的Observable对象</h2><p>interval和timer ：定时产生数据</p><h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><p>等同于 JS 中的 setInterval和setTimeout<br><strong>interval 接收 一个数值类型的参数， 代表产生数据的间隔毫秒数， 返回的Observable 对象 是按照这个时间间隔 输出递增的整数序列。</strong><br><code>const source$=Observable.interval(1000)</code></p><p>interval是不会主动调用下游的complete，要想停止这个数据序列，需要退订。</p><h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><p>timer的第⼀个参数可以是⼀个数值，也可以是⼀个Date类型的对象。如果第⼀个参数是数值，代表毫秒数，产⽣的Observable对象在指定毫秒之后会吐出⼀个数据0，然后⽴刻完结。<br><code>const source$=Observable.timer(1000)</code><br>上⾯的功能也可以通过传递⼀个Date对象给timer来实现，代码如下</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> now<span class="token operator">=</span><span class="token function">newDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> later<span class="token operator">=</span><span class="token function">newDate</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">timer</span><span class="token punctuation">(</span>later<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使⽤数值参数还是使⽤Date对象作为参数，应该根据具体情况确定，如果明确延时产⽣数据的时间间隔，那就应该⽤数值作为参数，如果明确的是⼀个时间点，那⽤Date对象毫⽆疑问是最佳选择。<br>timer还⽀持第⼆个参数，如果使⽤第⼆个参数，那就会产⽣⼀个持续吐出数据的Observable对象，类似interval的数据流。第⼆个参数指定的是各数据之间的时间间隔，从被订阅到产⽣第⼀个数据0的时间间隔，依然由第⼀个参数决定。<br>在下⾯的⽰例代码中，source$被订阅之后，2秒钟的时刻吐出0，然后3秒钟的时刻吐出1，4秒钟的时刻吐出2……依次类推：</p><p><code>const source$=Observable.timer(2000,1000);</code></p><h3 id="from-可把一切转为Observable"><a href="#from-可把一切转为Observable" class="headerlink" title="from : 可把一切转为Observable"></a>from : 可把一切转为Observable</h3><p>from可能是创建类操作符中包容性最强的⼀个了，因为它接受的参数只要“像”Observable就⾏，然后根据参数中的数据产⽣⼀个真正的 Observable对象。<br><code>const source$=Observable.from([1,2,3])</code><br>from 也可以将generator函数的结果转为Observable对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">generateNumber</span><span class="token punctuation">(</span><span class="token parameter">max</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>max<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">generateNumber</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为 1，2，3</p><h3 id="from-也可以接收字符串作为参数"><a href="#from-也可以接收字符串作为参数" class="headerlink" title="from 也可以接收字符串作为参数"></a>from 也可以接收字符串作为参数</h3><p><code>const source$=Observable.from(&#39;abc&#39;)</code><br>from会将参数当做是Iterable看待，字符串abc在from看来就是数组[‘a’,’b’,’c’]</p><h3 id="fromPromise-异步处理的交接"><a href="#fromPromise-异步处理的交接" class="headerlink" title="fromPromise :异步处理的交接"></a>fromPromise :异步处理的交接</h3><p> 如果from的参数是Promise对象，那么这个Promise成功结束，from产⽣的Observable对象就会吐出Promise成功的结果，并且⽴刻结束，⽰例代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> promise<span class="token operator">=</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'good'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$<span class="token operator">=</span>Observable<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>   console<span class="token punctuation">.</span>log<span class="token punctuation">,</span><span class="token parameter">error</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise对象虽然也⽀持异步操作，但是它只有⼀个结果，所以当 Promise成功完成的时候，from也知道不会再有新的数据了，所以⽴刻完结了产⽣的Observable对象。<br>当Promise对象以失败⽽告终的时候，from产⽣的Observable对象也会⽴刻产⽣失败事件。</p><h3 id="fromEvent"><a href="#fromEvent" class="headerlink" title="fromEvent"></a>fromEvent</h3><p>fromEvent的第一个参数是一个事件源，在浏览器中，最常见的事件源是DOM元素，第二个参数是事件的名称，对应的DOM事件就是click、mousemove这样的字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"clickMe"</span><span class="token operator">></span>ClickMe<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>div  id<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>目的：点击按钮，id为text的div数字增1。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> clickCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> event$<span class="token operator">=</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#clickMe'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>event$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token operator">++</span>clickCount  <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>fromEvent是DOM和RxJS世界的桥梁</strong>，产⽣Observable对象之后，就可以完全按照RxJS的规则来处理数据<br>fromEvent除了可以从DOM中获得数据，还可以从Node.js的events中获得数据<br>fromEvent产⽣的是<code>HotObservable</code></p>]]></content>
      
      
      <categories>
          
          <category> Rxjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rxjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个LazyMan</title>
      <link href="/2022/03/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AALazyMan/"/>
      <url>/2022/03/20/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AALazyMan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/BetaSu/fe-hunter/issues/13">参考</a></p><h1 id="要实现的功能"><a href="#要实现的功能" class="headerlink" title="要实现的功能"></a>要实现的功能</h1><p>实现一个 LazyMan，按照以下方式调用时，得到相关输出。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">"Hank"</span><span class="token punctuation">)</span><span class="token comment">// 打印：Hi! This is Hank!</span><span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">"Hank"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"dinner"</span><span class="token punctuation">)</span><span class="token comment">// 打印：Hi! This is Hank!</span><span class="token comment">// 等待了 10 秒后</span><span class="token comment">// 打印：Wake up after 10</span><span class="token comment">// 打印：Eat dinner~</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">"Hank"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"dinner"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"supper"</span><span class="token punctuation">)</span><span class="token comment">// 打印：Hi This is Hank!</span><span class="token comment">// 打印：Eat dinner~</span><span class="token comment">// 打印：Eat supper~</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">"Hank"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleepFirst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"supper"</span><span class="token punctuation">)</span><span class="token comment">// 等待了 5 秒后</span><span class="token comment">// 打印：Wake up after 5</span><span class="token comment">// 打印：Hi This is Hank!</span><span class="token comment">// 打印：Eat supper</span><span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token string">"Hank"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"supper"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleepFirst</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">// 等待了 5 秒后</span><span class="token comment">// 打印：Wake up after 5</span><span class="token comment">// 打印：Hi This is Hank!</span><span class="token comment">// 打印：Eat supper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> log <span class="token punctuation">&#125;</span> <span class="token operator">=</span> console<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">s</span> <span class="token operator">=></span>        <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Wake up after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>s<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义队列并切设置第一个任务</span>    <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi! This is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 这个里用了 push(x) &amp;&amp; ctx </span>    <span class="token comment">// push 的返回值是数组 push 后的长度 所以不会出现 0 , 可以放心在箭头函数里使用</span>    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token parameter">food</span> <span class="token operator">=></span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Eat </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>food<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">~</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">,</span>        <span class="token function-variable function">sleep</span><span class="token operator">:</span> <span class="token parameter">s</span> <span class="token operator">=></span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">sleep</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">,</span>        <span class="token function-variable function">sleepFirst</span><span class="token operator">:</span> <span class="token parameter">s</span> <span class="token operator">=></span> queue<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">sleep</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ctx    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 延迟在下一个周期执行, 为了收集执行的任务</span>    <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">await</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="queueMicrotask"><a href="#queueMicrotask" class="headerlink" title="queueMicrotask"></a>queueMicrotask</h2><blockquote><p>当我们期望某段代码，不阻塞当前执行的同步代码，同时又期望它尽可能快地执行时，我们就需要使用它。</p></blockquote><p>在有一些框架和工具里面，如果遇到以上的这种需求，都是使用<code>Process.nextTick</code>和<code>Promise.resolve</code>来解决。<br>但是这些都不是很合适，比如<code>Promise.resolve</code>： 会将异常转换为一个<code>rejected</code> 的<code>Promise</code> 。<code>Promise.resolve</code>会返回一个<code>Promise</code>实例对象，而<code>requestMicrotask</code>不会，而且<code>requestMicrotask</code>语义上更加合适</p><h3 id="潜在问题"><a href="#潜在问题" class="headerlink" title="潜在问题"></a>潜在问题</h3><p>由于它是一个用于指派微任务的底层 api，我们很可能会在其中无限制地指派微任务到其队列之中，这样做的效果就是，浏览器的微任务队列始终处于非空状态，这将导致控制权始终无法交还给浏览器进行下一次事件循环，然后它就卡死了。</p><h3 id="polyfill"><a href="#polyfill" class="headerlink" title="polyfill"></a>polyfill</h3><p><code>core-js</code> 会复杂一些，它同时考虑了 <code>nodejs</code> 和 <code>browser</code> 两种情况，同时利用链表数据结构来模拟微任务队列的执行单元，同时实现了一个 <code>flush</code> 方法表示执行全部的微任务单元。<br>还实现了一个 <code>notify</code> 方法，该方法会根据具体的 js 运行时环境以及 api 的支持情况，分别尝试使用 <code>process.nextTick</code>、<code>MutationObserver</code> 和  <code>Promise.resolve</code> 以及最基本的宏任务 api 来执行 flush 方法，变相模拟微任务的执行过程。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>formily-QA</title>
      <link href="/2022/03/20/formily-QA/"/>
      <url>/2022/03/20/formily-QA/</url>
      
        <content type="html"><![CDATA[<p>formily 是一个庞大且复杂的框架，且日常维护者也仅有几个，具有一定的学习成本，也有不少 bugs。因此在次设置一个文档用于记录问题和查询解决方案。</p><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><h2 id="1-为什么我改了-SchemaForm-的-initialValues-但不起作用？"><a href="#1-为什么我改了-SchemaForm-的-initialValues-但不起作用？" class="headerlink" title="1. 为什么我改了 SchemaForm 的 initialValues 但不起作用？"></a>1. 为什么我改了 SchemaForm 的 initialValues 但不起作用？</h2><p><code>initialValues</code> 主要用于异步默认值场景，兼容同步默认值，只要在第 N 次渲染，某个字段还没被设置默认值，第 N+1 次渲染，就可以给其设置默认值</p><h2 id="表单样式不符合？"><a href="#表单样式不符合？" class="headerlink" title="表单样式不符合？"></a>表单样式不符合？</h2><p>Formily 所使用的是 antd 的样式。</p><p>可以通过传 <code>x-components-props: &#123; style: &#123;&#125; &#125;</code>，在 themed 里写覆盖样式等方法来解决。<br>如果样式修改很多，可考虑将原组件重新封装，但不建议重写。</p><p>如何用同一个 schema 渲染 Web 桌面端和 Web 移动端？<br>你需要参照 packages&#x2F;src&#x2F;components&#x2F;Form&#x2F;formily&#x2F;fields&#x2F;mobile.tsx 来创建一个支持双端渲染的 Field。</p><h1 id="已知的-Bug"><a href="#已知的-Bug" class="headerlink" title="已知的 Bug"></a>已知的 Bug</h1><h2 id="1-x-components-props-无法传递-moment-object"><a href="#1-x-components-props-无法传递-moment-object" class="headerlink" title="1. x-components-props 无法传递 moment object"></a>1. x-components-props 无法传递 moment object</h2><p>建议直传 Date</p><h2 id="2-自定义校验规则不能直接使用-x-rules-39-yourCustomRuleName-39"><a href="#2-自定义校验规则不能直接使用-x-rules-39-yourCustomRuleName-39" class="headerlink" title="2. 自定义校验规则不能直接使用 x-rules: &#39;yourCustomRuleName&#39;"></a>2. 自定义校验规则不能直接使用 <code>x-rules: &#39;yourCustomRuleName&#39;</code></h2><p>必须用 <code>x-rules: &#123; yourCustomRuleName: true &#125;</code></p><h2 id="使用-select-始终导出数组"><a href="#使用-select-始终导出数组" class="headerlink" title="使用 select 始终导出数组"></a>使用 select 始终导出数组</h2><p>单选型的情况下尽量使用 <code>Field &#123; type: &#39;string&#39;, enums: [], &#125;</code>，而不是 <code>select。</code></p><h2 id="选项型的-initialValues-会被清空"><a href="#选项型的-initialValues-会被清空" class="headerlink" title="选项型的 initialValues 会被清空"></a>选项型的 initialValues 会被清空</h2><p>当 <code>initialValues</code> 的里存在有值的选项型，同时 <code>Schema</code> 尚未完全加载完毕（通常选项型对应的选项（Enum）是异步加载的，Schema 会经历一个初始化到逐渐加载完毕的过程）。那么在这个时候，Formily 会过滤掉无效的设置，导致 <code>FormState.initialValues</code> 的选项会被清空。</p><p>如果你需要完整的 <code>initialValues</code>，要么保存传入 <code>initialValues</code> 的接口数据，要么在 <code>Schema</code> 完全加载完毕后再渲染表单。</p><h2 id="x-component-props-无法传递将来可能会变化的值，如数组-index"><a href="#x-component-props-无法传递将来可能会变化的值，如数组-index" class="headerlink" title="x-component-props 无法传递将来可能会变化的值，如数组 index"></a>x-component-props 无法传递将来可能会变化的值，如数组 index</h2>]]></content>
      
      
      <categories>
          
          <category> formily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> formily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Portals</title>
      <link href="/2022/03/14/Portals/"/>
      <url>/2022/03/14/Portals/</url>
      
        <content type="html"><![CDATA[<h1 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h1><p>Portals 提供了一种将<strong>子节点</strong>渲染到存在于<strong>父组件以外</strong>的DOM节点的优秀的方案。</p><pre class="line-numbers language-none"><code class="language-none">ReactDOM.createPortal(child, container)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>child: 任何可渲染的 React 子元素，例如一个元素，字符串或 fragment。<br>container: 一个DOM 元素</p><blockquote><p>一个 portal 的典型用例是当父组件有 overflow: hidden 或 z-index 样式时，但你需要子组件能够在视觉上“跳出”其容器。例如，对话框、悬浮卡以及提示框：</p></blockquote><p>示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> appRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> modalRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modal-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modalRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modalRoot<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleShow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleShow</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleHide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleHide</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">handleHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showModal <span class="token operator">?</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Modal<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"modal"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            With a portal<span class="token punctuation">,</span> we can render content into a different            part <span class="token keyword">of</span> the <span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">if</span> it were any other React child<span class="token punctuation">.</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          This is being rendered inside the #modal<span class="token operator">-</span>container div<span class="token punctuation">.</span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleHide<span class="token punctuation">&#125;</span><span class="token operator">></span>Hide modal<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        This div has overflow<span class="token operator">:</span> hidden<span class="token punctuation">.</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleShow<span class="token punctuation">&#125;</span><span class="token operator">></span>Show modal<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token punctuation">&#123;</span>modal<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> appRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> Portals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形和平铺结构互转</title>
      <link href="/2022/03/13/%E6%A0%91%E5%BD%A2%E5%92%8C%E5%B9%B3%E9%93%BA%E7%BB%93%E6%9E%84%E4%BA%92%E8%BD%AC/"/>
      <url>/2022/03/13/%E6%A0%91%E5%BD%A2%E5%92%8C%E5%B9%B3%E9%93%BA%E7%BB%93%E6%9E%84%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-将树形转换成平铺数据结构"><a href="#1-将树形转换成平铺数据结构" class="headerlink" title="1. 将树形转换成平铺数据结构"></a>1. 将树形转换成平铺数据结构</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">dd</span><span class="token operator">:</span> <span class="token string">'abcdd'</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">ee</span><span class="token operator">:</span> <span class="token string">'adee'</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token string">'af'</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'a.b.c.dd'</span><span class="token operator">:</span> <span class="token string">'abcdd'</span><span class="token punctuation">,</span>          <span class="token string-property property">'a.d.ee'</span><span class="token operator">:</span> <span class="token string">'adee'</span><span class="token punctuation">,</span>          <span class="token string-property property">'a.f'</span><span class="token operator">:</span> <span class="token string">'af'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解答一：递归"><a href="#解答一：递归" class="headerlink" title="解答一：递归"></a>解答一：递归</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>preKey<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newKey<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>preKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">flat</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>newKey<span class="token punctuation">]</span><span class="token operator">=</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解答二：-while循环-队列"><a href="#解答二：-while循环-队列" class="headerlink" title="解答二： while循环-队列"></a>解答二： while循环-队列</h2><h1 id="2-平铺转换成树形数据结构"><a href="#2-平铺转换成树形数据结构" class="headerlink" title="2. 平铺转换成树形数据结构"></a>2. 平铺转换成树形数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout</title>
      <link href="/2022/03/13/setTimeout/"/>
      <url>/2022/03/13/setTimeout/</url>
      
        <content type="html"><![CDATA[<p>小试一题： 0-99的乱序输出，如何改成顺序输出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.立即执行函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>setTimout的第二个参数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>setTimeout的第三个参数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> setTimeout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2022/03/13/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/13/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/u2417328/wm/atd0ic">思维导图</a><br><a href="https://1494601749.gitbook.io/wmspace/">其他地方</a></p><h1 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h1><blockquote><p><strong>AO对象</strong>： Activation Object ，活动性对象，执行期上下文（作用域） </p></blockquote><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><ol><li>寻找形参和变量声明</li><li>实参值赋值给形参</li><li>找函数声明，赋值</li><li>执行</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ a() &#123; &#125; 先找函数声明</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    a <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token operator">=</span> <span class="token number">2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><blockquote><p><strong>GO对象</strong>： Gobal Object ，全局对象，GO对象&#x3D;&#x3D;&#x3D;window对象。</p></blockquote><ol><li>找变量</li><li>找函数声明</li><li>执行</li></ol><blockquote><p>下面这题为什么打印出1 ？因为先找函数声明，此时a是函数，然后找赋值，此时a被覆盖为1了。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> a<span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来个综合的预编译案例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> c<span class="token punctuation">;</span>    <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>     a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    f <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//function sum()&#123;&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 </span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><ol><li>除了函数外，js是没有块级作用域。</li><li>作用域链：内部可以访问外部的变量，但是外部不能访问内部的变量。<br>  注意：如果内部有，优先查找到内部，如果内部没有就查找外部的。</li><li>注意声明变量是用var还是没有写（window.）</li><li>注意：js有变量提升的机制【变量悬挂声明】</li><li>优先级：声明变量 &gt; 声明普通函数 &gt; 参数 &gt; 变量提升</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2</span>  <span class="token punctuation">&#125;</span>  <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span class="token punctuation">&#125;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> name <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"111"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"222"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "a" -> AO里面变量提升 'undefined'-> "b"</span><span class="token comment">//111b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10   100 -> function a()&#123;&#125;-> 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2022/03/11/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2022/03/11/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty</title>
      <link href="/2022/03/10/defineProperty/"/>
      <url>/2022/03/10/defineProperty/</url>
      
        <content type="html"><![CDATA[<p>点击这里<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>，了解更多</p><p><code>Object.defineProperty(obj, &#39;key&#39;, descriptor);</code></p><p>其中 <code>descriptor</code> 可拥有的键值</p><ul><li><code>configurable</code> 表示对象的属性是否可以被删除，以及除 value 和 writable 特性外的其他特性是否可以被修改。</li><li><code>enumerable</code>  是否可以在 for…in 循环和 Object.keys() 中被枚举。</li><li><code>value</code> 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。</li><li><code>writable</code> 可写的</li><li><code>get</code></li><li><code>set</code></li></ul><h1 id="1-使-a-1-amp-amp-a-2-amp-amp-a-3-为true"><a href="#1-使-a-1-amp-amp-a-2-amp-amp-a-3-为true" class="headerlink" title="1. 使 a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3 为true"></a>1. 使 <code>a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3</code> 为true</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _default<span class="token operator">=</span><span class="token number">0</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">++</span>_default    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'相等哦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-console-log-输出-abc…z"><a href="#2-console-log-输出-abc…z" class="headerlink" title="2. console.log(_+_+_+_+) 输出 abc…z"></a>2. <code>console.log(_+_+_+_+)</code> 输出 abc…z</h1><p>利用 <code>Object.defineProperty</code>和<code>ASCII</code>码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">||</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_ch <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_ch        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _ <span class="token operator">+</span> _ <span class="token operator">+</span> _ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abcde</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-使-a-1-b-2-c-3-变成-a-3-b-3-c-5"><a href="#3-使-a-1-b-2-c-3-变成-a-3-b-3-c-5" class="headerlink" title="3. 使   {a: 1, b: 2, c: 3 }变成 { a: 3, b: 3, c: 5 }"></a>3. 使   <code>&#123;a: 1, b: 2, c: 3 &#125;</code>变成<code> &#123; a: 3, b: 3, c: 5 &#125;</code></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token operator">++</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>          Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">value</span><span class="token operator">:</span> k <span class="token operator">===</span> <span class="token string">'b'</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">++</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*      &#123;          a:3,          b:3,          c:5      &#125;      */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取数据了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> newVal<span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> newVal<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keyup"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  obj<span class="token punctuation">.</span>text <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化</title>
      <link href="/2022/03/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2022/03/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><blockquote><p>CDN （内容分发网络），由 分发服务系统、负载均衡系统、运营管理系统 组成</p></blockquote><p>CDN 一般用来托管 web 资源，可供下载的资源。</p><ol><li>在<strong>性能方面</strong>，引入 CDN 的作用在于：</li></ol><ul><li>用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</li><li>部分资源请求分配给 CDN，减少服务器的负载</li></ul><ol start="2"><li>在<strong>安全方面</strong>，CDN 有助于 防御 DDos，MITM 等网络攻击：</li></ol><ul><li>针对于 DDos：通过监控分析异常流量，限制其请求频率</li><li>针对 MITM：从源服务器到 CDN 节点到 ISP，全链路 HTTPS 通信。</li></ul><blockquote><p>除此之外，CDN 作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</p></blockquote><h2 id="CDN-的原理"><a href="#CDN-的原理" class="headerlink" title="CDN 的原理"></a>CDN 的原理</h2><p>CDN 和 DNS 有着密不可分的联系，首先看一下<strong>DNS 的解析域名过程</strong>。在浏览器输入 <code>www.test.com</code> 的解析过程如下：</p><ol><li>检查浏览器缓存</li><li>检查操作系统缓存，常见的入 hosts 文件</li><li>检查路由器缓存</li><li>如果前几步都没找到，会向 ISP（网络服务提供商）的 LDNS 服务器查询</li><li>如果 LDNS 服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：</li></ol><ul><li>根服务器 返回 顶级域名（TLD）服务器 如<code>.com</code>,<code>.cn</code>,<code>.org</code>等的地址，该例子中会返回<code>.com</code>的地址</li><li>接着向 顶级域名服务器 发送请求，然后会返回 次级域名（SLD）服务器的地址，本例子会返回 <code>.test</code>的地址</li><li>接着向 次级域名服务器 发送请求，然后会返回通过 域名查询到的 目标 IP，本例子会返回 <code> www.test.com</code>的地址</li><li>Local DNS Server 会缓存结果，并返回给用户，缓存在系统中。</li></ul><p><strong>CDN 的原理：</strong></p><h3 id="1-用户未使用-CDN-缓存资源的过程："><a href="#1-用户未使用-CDN-缓存资源的过程：" class="headerlink" title="1). 用户未使用 CDN 缓存资源的过程："></a>1). 用户未使用 CDN 缓存资源的过程：</h3><ol><li>浏览器通过 DNS 对域名进行解析，依次得到此域名对应的 IP 地址</li><li>浏览器根据得到的 IP 地址，向域名的服务主机发送数据请求</li><li>服务器向浏览器返回响应数据</li></ol><h3 id="2-用户使用-CDN-缓存资源的过程："><a href="#2-用户使用-CDN-缓存资源的过程：" class="headerlink" title="2. 用户使用 CDN 缓存资源的过程："></a>2. 用户使用 CDN 缓存资源的过程：</h3><ol><li>对于点击的数据的 URL，经过本地 DNS 系统的解析，发现该 URL 对应的是一个 CDN 专用的 DNS 服务器，DNS 系统就会将域名解析权交给<code>CNAME</code>指向的 CDN 专用的 DNS 服务器。</li><li><strong>CND 专用 DNS 服务器</strong>将 CND 的 全局负载均衡设备 IP 地址 返回给用户</li><li>用户向 CDN 的<strong>全局负载均衡设备</strong>发起数据请求</li><li>CDN 的全局负载均衡设备根据用户的 IP 地址，以及用户请求的内容 URL，选择一台用户所属区域的<strong>区域负载均衡设备</strong>，告诉用户向这台设备发起请求</li><li>区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的 IP 地址返回给全局负载均衡设备</li><li>全局负载均衡设备把服务器的 IP 地址返回给用户</li><li>用户向该<strong>缓存服务器</strong>发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603966294889-153271b5-4b9f-4470-b05f-c7a9f030d043.png?x-oss-process=image/resize,w_1500,limit_0" alt="CDN缓存资源过程"></p><h2 id="CDN-的使用场景"><a href="#CDN-的使用场景" class="headerlink" title="CDN 的使用场景"></a>CDN 的使用场景</h2><ul><li><strong>使用第三方的 CDN 服务：</strong> 如果想要开源一些项目，可以使用第三方的 CDN 服务</li><li><strong>使用 CDN 进行静态资源的缓存：</strong> 将自己网站的静态资源放在 CDN 上，比如 js、css、图片等。可以将整个项目放在 CDN 上，完成一键部署。</li><li><strong>直播传送：</strong> 直播本质上是使用流媒体进行传送，CDN 也是支持流媒体传送的，所以直播完全可以使用 CDN 来提高访问速度。CDN 在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。</li></ul><h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>懒加载，也叫做延迟加载，按需加载，指的是长网页中延迟加载图片数据，是一种较好的性能优化的方式。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>图片的加载是由 src 引起的，当对<code>src</code>赋值时，浏览器就会请求图片资源。根据这个原理，我们使用<code>HTML5</code> 的<code>data-xxx</code>属性来储存图片的路径，在需要加载图片的时候，将<code>data-xxx</code>中图片的路径赋值给 src，这样就实现了图片的按需加载，即懒加载。</p><p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，<strong>可视区域内的资源就是用户需要的资源</strong>。所以当图片出现在<strong>可视区域</strong>时，获取图片的真实地址并赋值给图片即可。</p><p><strong>知识点：</strong></p><ol><li><code>window.innerHeight</code> 是浏览器可视区的高度</li><li><code>document.body.scrollTop</code> || <code>document.documentElement.scrollTop</code> 是浏览器滚动过的距离</li><li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）</li><li>图片加载条件：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li></ol><h2 id="滚动请求"><a href="#滚动请求" class="headerlink" title="滚动请求"></a>滚动请求</h2><blockquote><p>Tips： 1. <code>element.scrollTop+element.clientHeight&gt;=element.scrollHeight-50 </code> <strong>触底了！</strong></p></blockquote><ol><li>监听滚动，出现可视区域请求</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"scroll"</span><span class="token punctuation">,</span> handleListenScroll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleListenScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取父级滚动轴距离顶部距离</span>  <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> box<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  <span class="token comment">//获取父级高度</span>  <span class="token keyword">const</span> divHeight <span class="token operator">=</span> box<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> divHeight <span class="token operator">+</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  getData()</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>判断是否出现在可视区域还有<code>Element.getBoundingClientRect()</code>方法返回元素的大小及其相对于时视口的位置。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">&lt;</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="防抖-x2F-节流"><a href="#防抖-x2F-节流" class="headerlink" title="防抖&#x2F;节流"></a>防抖&#x2F;节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>当触发事件是，一定时间内没有再触发事件，事件处理函数才会执行一次，如果在设计的时间内，再触发一次事件，就回重新开始延时。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// timer 是在闭包中的</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>当持续的触发事件时，一定时间内只执行一次。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交叉观察者"><a href="#交叉观察者" class="headerlink" title="交叉观察者"></a>交叉观察者</h2><blockquote><p><strong>交叉观察者</strong> 利用 <code>IntersectionObserver</code> 接口 提供一种异步观察<strong>目标元素</strong>与<strong>其祖先元素</strong>或顶级文档视窗（<code>viewport</code>）交叉状态的方法。祖先元素与视窗被称为根（<code>root</code>）</p></blockquote><blockquote><p>注意：IE 兼容性，不过可以使用官方的<a href="https://github.com/w3c/IntersectionObserver/tree/main/polyfill">polyfill</a></p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><code>root</code> 所监听对象的具体祖先元素（element）。如果未传入值或者值为 null，则默认使用顶级文档的视窗</li><li><code>rootMargin</code> 计算交叉时添加到根(root)边界盒 bounding box 的矩形偏移量， 可以有效的缩小或扩大根的判定范围从而满足计算需要</li><li><code>thresholds</code> 一个包含阈值的列表, 按升序排列, 列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>disconnect()</code> 使 IntersectionObserver 对象停止监听工作</li><li><code>observe()</code> 使 IntersectionObserver 开始监听一个目标元素。</li><li><code>takeRecords()</code> 返回所有观察目标的 IntersectionObserverEntry 对象数组。</li><li><code>unobserve()</code> 使 IntersectionObserver 停止监听特定目标元素。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 发生交叉目标元素集合</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>entries 里返回属性有 <code>boundingClientRect</code> 空间信息 <code>target</code> 目标元素 <code>isIntersecting</code> 是否发生交叉</p><h3 id="监听目标元素"><a href="#监听目标元素" class="headerlink" title="监听目标元素"></a>监听目标元素</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 是否发生交叉</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src<span class="token punctuation">;</span>        <span class="token comment">// 取消监听</span>        observe<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">root</span><span class="token operator">:</span> box<span class="token punctuation">,</span>    <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">"20px 0px 100px 0px"</span><span class="token punctuation">,</span> <span class="token comment">//偏移，距离底部100px 发送请求</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//监听目标元素</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="窗口化"><a href="#窗口化" class="headerlink" title="窗口化"></a>窗口化</h1><blockquote><p>只加载当前窗口能显示的 DOM 元素，当视图变化时，删除隐藏的，添加要显示的 DOM 就可以保证页面上存在的 dom 元素数量永远不多，页面就不会卡顿</p></blockquote><p>插件<code>react-window</code></p><p>引用 <code>import &#123; FixedSizeList as List &#125; from &#39;react-window&#39;;</code><br>使用</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">const Row &#x3D; (&#123; index, style &#125;) &#x3D;&gt; &lt;div style&#x3D;&#123;style&#125;&gt;Row &#123;index&#125;&lt;&#x2F;div&gt;;const Example &#x3D; () &#x3D;&gt; (  &lt;List height&#x3D;&#123;150&#125; itemCount&#x3D;&#123;1000&#125; itemSize&#x3D;&#123;35&#125; width&#x3D;&#123;300&#125;&gt;    &#123;Row&#125;  &lt;&#x2F;List&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h1><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><blockquote><p>当渲染树中部分或者全部元素的<strong>尺寸、结构或者属性</strong>发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。</p></blockquote><p>下面这些操作会导致回流：</p><ul><li>页面的首次渲染</li><li>浏览器的窗口大小发生变化</li><li>元素的内容发生变化</li><li>元素的尺寸或者位置发生变化</li><li>元素的字体大小发生变化</li><li>激活 CSS 伪类</li><li>查询某些属性或者调用某些方法</li><li>添加或者删除可见的 DOM 元素</li></ul><blockquote><p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的 DOM 元素重新排列，它的影响范围有两种：</p></blockquote><ul><li>全局范围： 从根节点开始，对整个渲染树进行重新布局</li><li>局部范围： 从渲染树的某部分或者一个渲染对象进行重新布局</li></ul><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>当页面中某些元素的<strong>样式发生变化</strong>，但是<strong>不会影响其在文档流中的位置</strong>时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p><p>下面这些操作会导致重绘：</p><ul><li>color、background 相关属性：background-color、background-image 等</li><li>outline 相关属性：outline-color、outline-width 、text-decoration</li><li>border-radius、visibility、box-shadow</li></ul><blockquote><p><strong>当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</strong></p></blockquote><h2 id="如何避免回流和重绘？"><a href="#如何避免回流和重绘？" class="headerlink" title="如何避免回流和重绘？"></a>如何避免回流和重绘？</h2><ul><li>操作 DOM 时，尽量在低层级的 DOM 节点进行操作</li><li>不要使用 table 布局， 一个小的改动可能会使整个 table 进行重新布局</li><li>使用 CSS 的表达式</li><li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li><li>使用 absolute 或者 fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</li><li>避免频繁操作 DOM，可以创建一个文档片段 documentFragment，在它上面应用所有 DOM 操作，最后再把它添加到文档中</li><li>将元素先设置 display: none，操作结束后再把它显示出来。因为在 display 属性为 none 的元素上进行的 DOM 操作不会引发回流和重绘。</li><li>将 DOM 的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</li></ul><p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列</p><p>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p><p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p><h1 id="webpack-优化"><a href="#webpack-优化" class="headerlink" title="webpack 优化"></a>webpack 优化</h1><h2 id="1-提高-webpack-打包速度"><a href="#1-提高-webpack-打包速度" class="headerlink" title="1. 提高 webpack 打包速度"></a>1. 提高 webpack 打包速度</h2><h3 id="（1）优化-Loader"><a href="#（1）优化-Loader" class="headerlink" title="（1）优化 Loader"></a>（1）优化 Loader</h3><h4 id="优化-Loader-的文件搜索范围"><a href="#优化-Loader-的文件搜索范围" class="headerlink" title="优化 Loader 的文件搜索范围"></a>优化 Loader 的文件搜索范围</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">&#123;</span>        <span class="token comment">// js 文件才使用 babel</span>        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>        <span class="token comment">// 只在 src 文件夹下查找</span>        <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment">// 不会去查找的路径</span>        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存-babel-编译文件"><a href="#缓存-babel-编译文件" class="headerlink" title="缓存 babel 编译文件"></a>缓存 babel 编译文件</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader?cacheDirectory=true"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（2）HappyPack"><a href="#（2）HappyPack" class="headerlink" title="（2）HappyPack"></a>（2）HappyPack</h3><p><strong>HappyPack 可以将 Loader 的同步执行转换成并行的</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token literal-property property">include</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>      <span class="token comment">// id 后面的内容对应下面</span>      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'happypack/loader?id=happybabel'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">HappyPack</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'happybabel'</span><span class="token punctuation">,</span>    <span class="token literal-property property">loaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader?cacheDirectory'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 开启 4 个线程</span>    <span class="token literal-property property">threads</span><span class="token operator">:</span> <span class="token number">4</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-DllPlugin"><a href="#3-DllPlugin" class="headerlink" title="(3).DllPlugin"></a>(3).DllPlugin</h3><p><strong>DllPlugin 可以将特定的类库提前打包然后引入</strong>。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。DllPlugin 的使用方法如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 单独配置在一个文件中</span><span class="token comment">// webpack.dll.conf.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 想统一打包的类库</span>    <span class="token literal-property property">vendor</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"[name].dll.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token string">"[name]-[hash]"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token comment">// name 必须和 output.library 一致</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"[name]-[hash]"</span><span class="token punctuation">,</span>      <span class="token comment">// 该属性需要与 DllReferencePlugin 中一致</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token string">"[name]-manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后需要执行这个配置文件生成依赖文件，接下来需要使用 <code>DllReferencePlugin</code> 将依赖文件引入项目中</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// webpack.conf.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...省略其他配置</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DllReferencePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">context</span><span class="token operator">:</span> __dirname<span class="token punctuation">,</span>      <span class="token comment">// manifest 就是之前打包出来的 json 文件</span>      <span class="token literal-property property">manifest</span><span class="token operator">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./dist/vendor-manifest.json"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-代码压缩"><a href="#4-代码压缩" class="headerlink" title="(4).代码压缩"></a>(4).代码压缩</h3><p>在 <code>Webpack3</code> 中，一般使用 <code>UglifyJS</code> 来压缩代码，但是这个是单线程运行的，为了加快效率，可以使用 <code>webpack-parallel-uglify-plugin</code> 来并行运行 UglifyJS，从而提高效率。</p><p>在 <code>Webpack4</code> 中，不需要以上这些操作了，只需要将 mode 设置为 <code>production</code> 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 <code>console.log </code>这类代码的功能。</p><h2 id="2-减少-webpack-打包体积"><a href="#2-减少-webpack-打包体积" class="headerlink" title="2. 减少 webpack 打包体积"></a>2. 减少 webpack 打包体积</h2><h3 id="1-按需加载"><a href="#1-按需加载" class="headerlink" title="(1).按需加载"></a>(1).按需加载</h3><h3 id="2-Scope-Hoisting"><a href="#2-Scope-Hoisting" class="headerlink" title="(2).Scope Hoisting"></a>(2).Scope Hoisting</h3><p>Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。如果在 <code>Webpack4</code> 中你希望开启这个功能，只需要启用 <code>optimization.concatenateModules</code> 就可以了：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">concatenateModules</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Tree-Shaking"><a href="#3-Tree-Shaking" class="headerlink" title="(3).Tree Shaking"></a>(3).Tree Shaking</h3><p>Tree Shaking 可以实现删除项目中未被引用的代码</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSBridge</title>
      <link href="/2022/03/08/JSBridge/"/>
      <url>/2022/03/08/JSBridge/</url>
      
        <content type="html"><![CDATA[<p>JSBridge <strong>给JavaScript提供调用Native功能的接口</strong>， 让混合开发中的【前端部分】可以方便地使用地址位置、摄像头深知支付等 Native 功能。</p><p>JSBridge的用途不只是【调用Native功能】这么简单宽泛。实际上，JSBridge 就像其名称中的【Bridge】的意义一样，是Native 和非Native之间的桥梁，它的核心是 构建Native和非Native间消息通信的通道，而且是双向通信的通道。</p><blockquote><p>双向通信的通道：</p><ul><li>JS 向 Native 发送消息： 调用相关功能、通知Native当前JS的相关状态等</li><li>Native 向 JS 发送消息： 回溯调用结果，消息推送、通知JS当前Native的状态等。</li></ul></blockquote><h2 id="JSBridge的实现原理"><a href="#JSBridge的实现原理" class="headerlink" title="JSBridge的实现原理"></a>JSBridge的实现原理</h2><p>JavaScript是运行在一个单独的 JS context 中。由于这些context 与原生运行环境的天然隔离，我们可以将这种情况与 RPC 通信进行类比。将 Native 与 JavaScript 的每次互相调用看做一次 RPC 调用。<br>在 JSBridge 的设计中，可以把前端看做 RPC 的客户端，把 Native 端看做 RPC 的服务器端，从而 JSBridge 要实现的主要逻辑就出现了：<br><strong>通信调用（Native 与 JS 通信） 和 句柄解析调用。</strong></p><blockquote><p>（如果你是个前端，而且并不熟悉 RPC 的话，你也可以把这个流程类比成 JSONP 的流程）</p></blockquote><p>详情见<a href="https://juejin.cn/post/6844903585268891662">https://juejin.cn/post/6844903585268891662</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> JSBridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>styled component 使用规范</title>
      <link href="/2022/03/08/styled-component-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
      <url>/2022/03/08/styled-component-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h2><p>定义组件然后添加样式（通常再 export 出去）：以业务含义命名为基础，style 前加 <code>Raw</code> 后缀，style 后去除后缀。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">const</span> <span class="token function-variable function">HelpCenterRaw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// define component</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> HelpCenter <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>HelpCenterRaw<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // add styles</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><p>import 后再次 style 一个组件，添加 Styled 后缀。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HelpCenter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./HelpCenter'</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">&lt;</span>HelpCenterStyled <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> HelpCenterStyled <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>HelpCenter<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some styles</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Html-Tag-或通用基础组件"><a href="#Html-Tag-或通用基础组件" class="headerlink" title="Html Tag 或通用基础组件"></a>Html Tag 或通用基础组件</h2><p>有时我们 style 的不是自定义业务组件，而是 html tag 或通用基础组件，那就不存在重新命名的问题，以业务含义命名即可。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">&lt;</span>Logo <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>UserMenu <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> Logo <span class="token operator">=</span> styled<span class="token punctuation">.</span>img<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some styles</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> UserMenu <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Menu<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some style</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h1><h2 id="将样式代码放至文件末尾"><a href="#将样式代码放至文件末尾" class="headerlink" title="将样式代码放至文件末尾"></a>将样式代码放至文件末尾</h2><p>基于业务逻辑比样式重要的原则，我们一般把样式代码放到文件的最后。上文代码即为示例。</p><p>覆盖 Ant Design 组件样式</p><p>当你尝试用 styled-components 去 wrap 一个 Ant Design 组件以覆盖原样式时，可能因为样式权重不够而失败。添加 !important 不是一个好的实践，可以按 styled-components 官方推荐的方法添加多个 &amp; 来提高权重：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> DividerStyled <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Divider<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  &amp;&amp;&amp; &#123;    margin: 0 12px 0 4px;  &#125;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-React-Native-中使用"><a href="#在-React-Native-中使用" class="headerlink" title="在 React Native 中使用"></a>在 React Native 中使用</h2><p>用法上没有不同，但 import 方式稍有不同：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components/native'</span> <span class="token comment">// instead of 'styled-components'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>styled-components 内部使用了 css-to-react-native 来将 CSS 文本转化为 React Native StyleSheet Object，详见：<a href="https://github.com/styled-components/css-to-react-native">https://github.com/styled-components/css-to-react-native</a></p><h2 id="用-props-动态计算样式"><a href="#用-props-动态计算样式" class="headerlink" title="用 props 动态计算样式"></a>用 props 动态计算样式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Good</span><span class="token operator">&lt;</span>Foo status<span class="token operator">=</span><span class="token punctuation">&#123;</span>Status<span class="token punctuation">.</span>Success<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">const</span> Foo <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> status<span class="token operator">?</span><span class="token operator">:</span> Status <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  font-weight: bold;  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> status <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> StatusEnum<span class="token punctuation">.</span>Success<span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Green      <span class="token keyword">case</span> StatusEnum<span class="token punctuation">.</span>Warning<span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Yellow      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Gray    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token comment">// Bad</span><span class="token keyword">const</span> Foo <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token punctuation">.</span><span class="token function">attrs</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> status <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> status<span class="token operator">?</span><span class="token operator">:</span> Status <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  status<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ...</span><span class="token template-punctuation string">`</span></span><span class="token comment">/** * .attrs() 的主要用途是给 styled 的目标元素/组件透传一些属性（attributes）， * 比如 styled.input.attrs(props => (&#123; type: 'password' &#125;))` ... `， * 这个会设置 input 的 type 属性为 password， * 详见：https://styled-components.com/docs/basics#attaching-additional-props */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="如何获得-styled-components-样式代码的语法高亮？"><a href="#如何获得-styled-components-样式代码的语法高亮？" class="headerlink" title="如何获得 styled-components 样式代码的语法高亮？"></a>如何获得 styled-components 样式代码的语法高亮？</h2><p>VSCode 可安装 jpoissonnier.vscode-styled-components 插件。<br>WebStorm 可安装 Styled Components &amp; Styled JSX 插件。</p><h2 id="在-React-Native-中使用-StyleSheet-时，stylelint-报-selector-type-no-unknown-错误"><a href="#在-React-Native-中使用-StyleSheet-时，stylelint-报-selector-type-no-unknown-错误" class="headerlink" title="在 React Native 中使用 StyleSheet 时，stylelint 报 selector-type-no-unknown 错误"></a>在 React Native 中使用 StyleSheet 时，stylelint 报 selector-type-no-unknown 错误</h2><p>请统一使用 styled-components 来定义样式。</p><h2 id="在-React-Native-中使用-styled-components-时，stylelint-报-property-no-unknown-错误"><a href="#在-React-Native-中使用-styled-components-时，stylelint-报-property-no-unknown-错误" class="headerlink" title="在 React Native 中使用 styled-components 时，stylelint 报 property-no-unknown 错误"></a>在 React Native 中使用 styled-components 时，stylelint 报 property-no-unknown 错误</h2><p>将该 React Native 特有的样式属性添加到 stylelint.config.js 的 rules.property-no-unknown.ignoreProperties 中。</p><h2 id="在-stylelint-报错的-line-number-的对应行上找不到错误"><a href="#在-stylelint-报错的-line-number-的对应行上找不到错误" class="headerlink" title="在 stylelint 报错的 line number 的对应行上找不到错误"></a>在 stylelint 报错的 line number 的对应行上找不到错误</h2><p>stylelint 报错的 line number 是一个样式 block 的第一行，错误需要在整个 block 内寻找。</p><p>Warning: Received “true” for a non-boolean attribute<br>是因为传递的 true&#x2F;false 不是符合标准的 DOM attribute，以下链接有更详细的说明<br><a href="https://styled-components.com/docs/faqs#why-am-i-getting-html-attribute-warnings">https://styled-components.com/docs/faqs#why-am-i-getting-html-attribute-warnings</a><br><a href="https://github.com/styled-components/styled-components/issues/1198">https://github.com/styled-components/styled-components/issues/1198</a></p><p><code>0</code> is not a valid style property</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HeaderColumn <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> width<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  padding: 14px 0;  align-items: center;// 错误写法，width 的值会被 StyleSheet 当作 style key  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span>    props<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span>    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px;    </span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  // 正确写法，改用三元</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span>    props<span class="token punctuation">.</span>width <span class="token operator">?</span>    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px;    </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> style </category>
          
      </categories>
      
      
        <tags>
            
            <tag> style </tag>
            
            <tag> style component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react native 最佳实践</title>
      <link href="/2022/03/08/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/03/08/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="样式相关"><a href="#样式相关" class="headerlink" title="样式相关"></a>样式相关</h1><h2 id="浮动按钮"><a href="#浮动按钮" class="headerlink" title="浮动按钮"></a>浮动按钮</h2><p>当你想要创建一个浮动按钮时，却发现无论如何设置 position 和 z-index ，按钮始终显示在视图下方。此时，你请留意自己的按钮是否将定位属性和 Touchable 组件写到了一起：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">FloatButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapper onPress<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这个情况下，甚至无法点击按钮  </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TouchableOpacity<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  position: absolute;  z-index: 100;  bottom: 20px;  right: 20px;  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是这样，你需要将布局样式属性和 Touchable 组件做一个分离，才能得到正确的浮动效果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">FloatButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapper<span class="token operator">></span>    <span class="token operator">&lt;</span>Button onPress<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 正常点击</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Wrapper<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  position: absolute;  z-index: 100;  bottom: 20px;  right: 20px;  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TouchableOpacity<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp</title>
      <link href="/2022/03/06/jsonp/"/>
      <url>/2022/03/06/jsonp/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 动态的加载js文件</span><span class="token keyword">function</span> <span class="token function">addScript</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>  script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">addScript</span><span class="token punctuation">(</span><span class="token string">"http://xxx.xxx.com/xxx.js?callback=handleRes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置一个全局的callback函数来接收回调结果</span><span class="token keyword">function</span> <span class="token function">handleRes</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口返回的数据格式</span><span class="token function">handleRes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react fiber</title>
      <link href="/2022/03/06/react-fiber/"/>
      <url>/2022/03/06/react-fiber/</url>
      
        <content type="html"><![CDATA[<h1 id="react-15-渲染方式"><a href="#react-15-渲染方式" class="headerlink" title="react 15 渲染方式"></a>react 15 渲染方式</h1><blockquote><p>缺点： 如果界面节点多，层次深，递归渲染比较耗时，JS是单线程的，而且UI线程和JS线程是互斥的，页面会出现卡顿的现象。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'0'</span> className<span class="token operator">=</span><span class="token string">'red'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> rootParent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(JSON.stringify(element, null, 2)) </span>  <span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">===</span><span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">childrenProp</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token function">render</span><span class="token punctuation">(</span>childrenProp<span class="token punctuation">,</span>dom<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        dom<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      dom<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  rootParent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="什么是fiber"><a href="#什么是fiber" class="headerlink" title="什么是fiber"></a>什么是fiber</h1><ol><li>fiber 是一种 ** 数据结构**，它可以使用一个纯JS对象来表示</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fiber<span class="token operator">=</span><span class="token punctuation">&#123;</span>    stateNode<span class="token punctuation">,</span> <span class="token comment">//节点实例</span>    child<span class="token punctuation">,</span>     <span class="token comment">//子节点</span>    sibling<span class="token punctuation">,</span>   <span class="token comment">//兄弟节点</span>    <span class="token keyword">return</span><span class="token punctuation">,</span>    <span class="token comment">//父节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>fiber 是一个执行单元，每次执行完一个执行单元，react就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p></li><li><p>fiber关键特性</p></li></ol><ul><li>增量渲染 （将渲染任务进行拆分，均匀到每一帧去执行）</li><li>可暂停、终止，复用渲染任务</li><li>不同更新的优先级</li><li>并发方面新的基础能力</li></ul><h1 id="fiber-运行流程"><a href="#fiber-运行流程" class="headerlink" title="fiber 运行流程"></a>fiber 运行流程</h1><h2 id="帧的概念"><a href="#帧的概念" class="headerlink" title="帧的概念"></a>帧的概念</h2><h2 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame"></a>window.requestAnimationFrame</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame()</a> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p><blockquote><p>注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'some-element-you-want-to-animate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> start<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>  <span class="token keyword">const</span> elapsed <span class="token operator">=</span> timestamp <span class="token operator">-</span> start<span class="token punctuation">;</span>  <span class="token comment">//这里使用`Math.min()`确保元素刚好停在200px的位置。</span>  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'translateX('</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> elapsed<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px)'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 在两秒后停止动画</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback"></a>requestIdleCallback</h2><blockquote><p>这是一个实验中的功能,不是所有的浏览器豆兼容。 react中是模拟了一个类似<code>requestIdleCallback</code>的功能</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback">window.requestIdleCallback()</a> 方法插入一个函数，这个函数将在浏览器<strong>空闲</strong>时期被调用。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。</p><p>你可以在空闲回调函数中调用<code>requestIdleCallback()</code>，以便在下一次通过事件循环之前调度另一个回调。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> handle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个ID，可以把它传入 <code>Window.cancelIdleCallback()</code> 方法来结束回调。</p><h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><p>Channel Messaging API的<code>MessageChannel</code> 接口允许我们创建一个新的<strong>消息通道</strong>，并通过它的两个<code>MessagePort</code> 属性发送数据.</p><blockquote><p>此特性在 Web Worker 中可用</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在以下代码块中，您可以看到使用<code>MessageChannel</code>构造函数实例化了一个<code>channel</code>对象。当<code>iframe</code>加载完毕，我们使用<code>MessagePort.postMessage</code>方法把一条消息和<code>MessageChannel.port2</code>传递给<code>iframe</code>。<code>handleMessage</code>处理程序将会从<code>iframe</code>中（使用<code>MessagePort.onmessage</code>监听事件）接收到信息，将数据其放入<code>innerHTML</code>中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> otherWindow <span class="token operator">=</span> ifr<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>ifr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> iframeLoaded<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">iframeLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  otherWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'Hello from the main page!'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>channel<span class="token punctuation">.</span>port2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> handleMessage<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  para<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目前<code> requestIdleCallback</code>只有chrome支持</li><li>所以React 利用 MessageChannel模拟了RequestIdleCallback，将毁掉延迟到绘制操作之后执行。</li><li>MessageChannel API 允许我们创建一个新的消息通道，并通过他的两个MessagePort属性发送数据。</li><li>MessageChannel 创建了一个通信的管道，这个管道又两个端口，每个端口都可以用过postMessage发送数据，而应该端口只要绑定了onMessage回调方法，就可以接受另外一个端口传过来的数据。</li><li>MessageChannel是一个宏任务。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> channel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> port1<span class="token operator">=</span>channel<span class="token punctuation">.</span>port1<span class="token keyword">let</span> port2<span class="token operator">=</span>channel<span class="token punctuation">.</span>port2port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'port1 receive data:'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'port2 receive data:'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"port1数据"</span><span class="token punctuation">)</span>port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"port2数据"</span><span class="token punctuation">)</span><span class="token comment">//打印结果</span><span class="token comment">/* port2 receive data: port1数据port1 receive data: port2数据 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fiber-执行阶段"><a href="#fiber-执行阶段" class="headerlink" title="fiber 执行阶段"></a>fiber 执行阶段</h2><p> 每次渲染有两个阶段： <code>Reconciliation</code>(协调render阶段)和<code>Commit</code>（提交阶段）</p><ul><li>协调的阶段： 可以认为是<code>Diff</code>阶段，这个阶段可以被终止，这个阶段会找出所有的节点变更，例如节点新增、删除、属性变更等等，这些变更称为副作用。</li><li>提交阶段： 将上一阶段计算出来的需要处理的副作用（effects）一次性执行了。这个阶段必须同步执行，不能被打断。</li></ul><h3 id="遍历规则"><a href="#遍历规则" class="headerlink" title="遍历规则"></a>遍历规则</h3><p>按照深度优先：</p><ol><li>下一个节点：先儿子，后弟弟，再叔叔</li><li>自己的所有子节点完成后自己完成</li></ol><h1 id="深度剖析fiber单元处理过程以及EffectList的构建过程"><a href="#深度剖析fiber单元处理过程以及EffectList的构建过程" class="headerlink" title="深度剖析fiber单元处理过程以及EffectList的构建过程"></a>深度剖析fiber单元处理过程以及EffectList的构建过程</h1><p>React 框架内部的运作可以分为3层：</p><ul><li>virtual DOM 层，描述页面长什么样</li><li>Reconciler 层，负责调用组件生命周期方法，进行Diff算法等。</li><li>Renderer 层，根据不同的平台，渲染出相应的页面.</li></ul><p>为了加以区分，以前的 Reconciler 被命名为<code>Stack Reconciler</code>。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑,而 <code>Fiber Reconciler</code> 每执行一段时间，都会将控制权交回给浏览器，可以<code>分段执行</code>。<br>为了达到这种效果，就需要有一个调度器 (<code>Scheduler</code>) 来进行任务分配。任务的优先级有六种:</p><ul><li><code>synchronous</code>，与之前的Stack Reconciler操作一样，同步执行</li><li><code>task</code>，在next tick之前执行</li><li><code>animation</code>，下一帧之前执行</li><li><code>high</code>，在不久的将来立即执行</li><li><code>low</code>，稍微延迟执行也没关系</li><li><code>offscreen</code>，下一次render时或scroll时才执行</li></ul><p>Fiber Reconciler 在执行过程中，会分为 2 个阶段。<br><img src="https://segmentfault.com/img/bVboJH6?w=1076&h=697" alt="阶段图"></p><ol><li>阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。</li><li>阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li></ol><h2 id="fiber树"><a href="#fiber树" class="headerlink" title="fiber树"></a>fiber树</h2><p>Fiber Reconciler 在阶段一进行 Diff 计算的时候，会生成一棵 Fiber 树。这棵树是在 Virtual DOM 树的基础上增加额外的信息来生成的，它本质来说是一个链表。<br>![])(<a href="https://segmentfault.com/img/bVboJHa?w=970&amp;h=732">https://segmentfault.com/img/bVboJHa?w=970&amp;h=732</a>)<br>![])(<a href="https://segmentfault.com/img/bVboJHa?w=970&amp;h=732">https://segmentfault.com/img/bVboJHa?w=970&amp;h=732</a>)</p><p>Fiber 树在首次渲染的时候会一次过生成。在后续需要 Diff 的时候，会根据已有树和最新 Virtual DOM 的信息，生成一棵新的树。这颗新树每生成一个新的节点，都会将控制权交回给主线程，去检查有没有优先级更高的任务需要执行。如果没有，则继续构建树的过程：<br><img src="https://segmentfault.com/img/bVboJNB?w=872&h=785"></p><p>如果过程中有优先级更高的任务需要进行，则 <code>Fiber Reconciler</code> 会丢弃正在生成的树，在空闲的时候再重新执行一遍。</p><p>在构造 Fiber 树的过程中，Fiber Reconciler 会将需要更新的节点信息保存在<code>Effect List</code>当中，在阶段二执行的时候，会批量更新相应的节点。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一个工作单元</span><span class="token comment">// fiber 其实也是一个普通的JS对象</span><span class="token keyword">let</span> workInProgressRoot <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stateNode</span><span class="token operator">:</span> root<span class="token punctuation">,</span> <span class="token comment">// 此fiber对应的DOM节点</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>element<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> nextUnitOfWork <span class="token operator">=</span> workInProgressRoot<span class="token punctuation">;</span><span class="token keyword">const</span>  <span class="token constant">PLACEMENT</span> <span class="token operator">=</span> <span class="token string">"PLACEMENT"</span><span class="token comment">// 定义一个工作循环</span><span class="token keyword">function</span> <span class="token function">workloop</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始工作循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextUnitOfWork<span class="token operator">&amp;&amp;</span>deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         nextUnitOfWork <span class="token operator">=</span>  <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>nextUnitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextUnitOfWork<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">commitRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">commitRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> currentFiber <span class="token operator">=</span> workInProgressRoot<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"commitRoot:"</span><span class="token punctuation">,</span> currentFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>effectTag <span class="token operator">===</span> <span class="token string">"PLACEMENT"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             currentFiber<span class="token punctuation">.</span>return<span class="token punctuation">.</span>stateNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        currentFiber <span class="token operator">=</span> currentFiber<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * beginWork 1. 创建此Fiber的真实DOM * 通过虚拟DOM创建Fiber树结构 * @param &#123;*&#125; workingInProgressFiber  */</span><span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">beginWork</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> workingInProgressFiber<span class="token punctuation">.</span>child<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 如果没有儿子当前节点其实就结束了</span>        <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> workingInProgressFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        workingInProgressFiber <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"completeUnitOfWork"</span><span class="token punctuation">,</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建副作用链，上面只有副作用的节点</span>    <span class="token keyword">let</span> returnFiber <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span><span class="token comment">// A1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 把当前fiber有副作用的子链表挂载到父身上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>returnFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>effectTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beginWork"</span><span class="token punctuation">,</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>workingInProgressFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       workingInProgressFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span>   document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">"children"</span><span class="token punctuation">)</span>            workingInProgressFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 在beginwork 里面是不挂载的</span>    <span class="token comment">// 创建子Fiber</span>    <span class="token keyword">let</span> previousFiber<span class="token punctuation">;</span>    Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> childFiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> child<span class="token punctuation">.</span>type<span class="token punctuation">,</span><span class="token comment">// DOM节点类型</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> child<span class="token punctuation">.</span>props<span class="token punctuation">,</span>            <span class="token keyword">return</span><span class="token operator">:</span> workingInProgressFiber<span class="token punctuation">,</span>            <span class="token literal-property property">effectTag</span><span class="token operator">:</span><span class="token constant">PLACEMENT</span><span class="token punctuation">,</span><span class="token comment">// 这个fiber必须要插入到父节点中</span>            <span class="token literal-property property">nextEffect</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">// 下一个副作用节点</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            workingInProgressFiber<span class="token punctuation">.</span>child <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             previousFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        previousFiber <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 空闲时间</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workloop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reconcile调和"><a href="#reconcile调和" class="headerlink" title="reconcile调和"></a>reconcile调和</h2><blockquote><p>替换、更新、删除节点，可在fiber上打上tag，例如<code>fiber.effectTag=&#39;REPLACEMENT|DELETION|UPDATE&#39;</code></p></blockquote><ul><li>新老节点类型一样，复用老节点dom,更新props即可</li><li>如果类型不一样，而且新的节点存在，创建新的节点替换老节点</li><li>如果类型不一样，没有新节点，有老节点，删除老节点</li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> fiber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/03/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP/HTML/浏览器</title>
      <link href="/2022/02/20/HTTP-HTML-%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2022/02/20/HTTP-HTML-%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h1><p>&gt; <strong>https的SSL加密是在传输层实现的。</strong></p><ol><li>基本概念</li></ol><p><strong>http</strong>: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p><strong>https</strong>: 是以<strong>安全</strong>为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><ol start="2"><li><p>区别</p><blockquote><p>简单来说，https是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。</p></blockquote></li></ol><table><thead><tr><th>http</th><th>https</th></tr></thead><tbody><tr><td>无需费用</td><td>需要ca证书，费用较高</td></tr><tr><td>超文本传输协议,明文传输</td><td>安全性的ssl加密传输协议</td></tr><tr><td>端口80</td><td>端口443</td></tr><tr><td>连接无状态</td><td>由ssl+http协议构建的可进行加密传输、身份认证的网络协议</td></tr><tr><td>缓存快，握手快</td><td>缓存慢，握手阶段费时，增加数据、耗电</td></tr></tbody></table><h1 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h1><p><strong>客户端和服务端都需要直到各自可收发，一次需要三次握手</strong></p><p><img src="https://user-images.githubusercontent.com/17233651/42496289-1c6d668a-8458-11e8-98b3-65db50f64d48.png" alt="tcp三次握手"></p><p>从图片可以得到三次握手可以简化为：C发起请求连接S确认，也发起连接C确认我们再看看每次握手的作用：</p><ol><li><p>第一次握手：S只可以确认 自己可以接受C发送的报文段</p></li><li><p>第二次握手：C可以确认 S收到了自己发送的报文段，并且可以确认 自己可以接受S发送的报文段</p></li><li><p>第三次握手：S可以确认 C收到了自己发送的报文段</p></li></ol><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>面向连接</td><td>无连接（发送数据前不需要先建立连接）</td></tr><tr><td>可靠服务，数据无差错，不丢失，不重复，按序到达</td><td>不可靠，尽最大努力交付</td></tr><tr><td>字节流</td><td>报文</td></tr><tr><td>1对1</td><td>1对1 ，1对多</td></tr><tr><td>首部较大为20字节</td><td>首部最大有8字节</td></tr></tbody></table><h1 id="click在ios上有300ms延迟，原因及如何解决？"><a href="#click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="click在ios上有300ms延迟，原因及如何解决？"></a>click在ios上有300ms延迟，原因及如何解决？</h1><ol><li>粗暴型，禁用缩放</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, user-scalable=no"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>利用FastClick，其原理是：</li></ol><p>检测到<code>touchend</code> 事件后，立刻出发模拟<code>click</code> 事件，并且把浏览器300毫秒之后真正出发的事件给阻断掉</p><h1 id="HTTP-状态码及其含义"><a href="#HTTP-状态码及其含义" class="headerlink" title="HTTP 状态码及其含义"></a>HTTP 状态码及其含义</h1><ul><li><p><code>1XX</code>：信息状态码</p><ul><li><code>100 Continue</code> 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li><p><code>2XX</code>：成功状态码</p><ul><li><code>200 OK</code> 正常返回信息</li><li><code>201 Created</code> 请求成功并且服务器创建了新的资源</li><li><code>202 Accepted</code> 服务器已接受请求，但尚未处理</li></ul></li><li><p><code>3XX</code>：重定向</p><ul><li><code>301 Moved Permanently</code> 请求的网页已永久移动到新位置。</li><li><code>302 Found</code> 临时性重定向。</li><li><code>303 See Other</code> 临时性重定向，且总是使用 GET 请求新的 URI。</li><li><code>304 Not Modified</code> 自从上次请求后，请求的网页未修改过。</li></ul></li><li><p><code>4XX</code>：客户端错误</p><ul><li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li><code>401 Unauthorized</code> 请求未授权。</li><li><code>403 Forbidden</code> 禁止访问。</li><li><code>404 Not Found</code> 找不到如何与 URI 相匹配的资源。</li></ul></li><li><p><code>5XX</code>: 服务器错误</p><ul><li><code>500 Internal Server Error</code> 最常见的服务器端错误。</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h1 id="用户从浏览器输入地址到看到页面发生了什么"><a href="#用户从浏览器输入地址到看到页面发生了什么" class="headerlink" title="用户从浏览器输入地址到看到页面发生了什么"></a>用户从浏览器输入地址到看到页面发生了什么</h1><ul><li>检查缓存<br>○ DNS 缓存<br>○ 页面缓存</li><li>网络请求<br>○ DNS域名解析<br>○ 建立TCP连接(三次握手机制、四次握手机制(HTTPS安全协议下))<br>○ 发送HTTP请求<br>○ 接收响应</li><li>解析页面<br>○ 构建DOM树<br>○ 样式计算<br>○ 生成布局树</li><li>渲染过程<br>○ 建立图层树<br>○ 生成绘制列表<br>○ 生成图块、位图<br>○ 显示内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP/HTML/浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTML </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eventbus</title>
      <link href="/2022/02/20/eventbus/"/>
      <url>/2022/02/20/eventbus/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eventbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p><strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</strong><br>有一些对象我们往往只需要一个，比如 线程池、全局缓存、<strong>浏览器中的window对象</strong>。</p><h2 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h2><p>用一个变量来标志是否已经为某个类创建，如果是，那就返回之前被创建的实例。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Singleton</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">alert</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> Singleton<span class="token punctuation">.</span><span class="token function-variable function">getInstance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">name</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span> <span class="token string">'sven1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span> <span class="token string">'sven2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span> <span class="token punctuation">(</span> a <span class="token operator">===</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过 <code>Singleton.getInstance</code> 来获取 <code>Singleton</code> 类的唯一对象，这种方式相对简单，但有一个问题，就是增加了这个类的“不透明性”，Singleton 类的使用者必须知道这是一个单例类， 跟以往通过 new XXX 的方式来获取对象不同，这里偏要使用<code>Singleton.getInstance</code> 来获取对象。<br>所以以上这段 单例模式代码的意义不大，接下来编写更好的单例模式</p><h3 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h3><p>用户从这个类中创建对象的时候，可以像使用其他任何普通类一样。在下面的例子中，可以使用<code>createDiv</code>单例类，它的作用是负责在页面中创建唯一的<code>div</code> 节点，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> CreateDiv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> instance<span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token function-variable function">CreateDiv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">html</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> instance <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">CreateDiv</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>          document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> div <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> CreateDiv<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateDiv</span><span class="token punctuation">(</span> <span class="token string">'sven1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateDiv</span><span class="token punctuation">(</span> <span class="token string">'sven2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span> <span class="token punctuation">(</span> a <span class="token operator">===</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然现在完成了一个透明的单例类的编写，但它同样有一些缺点。 为了把 instance 封装起来，我们使用了自执行的匿名函数和闭包，并且让这个匿名函数返回 真正的 Singleton 构造方法，这增加了一些程序的复杂度，阅读起来也不是很舒服。<br>     观察现在的 Singleton 构造函数： </p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">CreateDiv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">html</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> instance <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这段代码中，<code>CreateDiv</code> 的构造函数实际上负责了两件事情。<br>第一是创建对象和执行初始化 init 方法;<br>第二是保证只有一个对象。虽然我们目前还没有接触过“单一职责原则”的概念， 但可以明确的是，这是一种不好的做法，至少这个构造函数看起来很奇怪。</p><p> 假设我们某天需要利用这个类，在页面中创建千千万万的 div，即要让这个类从单例类变成一个普通的可产生多个实例的类，那我们必须得改写 CreateDiv 构造函数，把控制创建唯一对象的那一段去掉，这种修改会给我们带来不必要的烦恼。</p><h3 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">CreateDiv</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">html</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>html <span class="token operator">=</span> html<span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token class-name">CreateDiv</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span> <span class="token string">'div'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span> div <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 接下来引入代理类 proxySingletonCreateDiv：<span class="token keyword">var</span> ProxySingletonCreateDiv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> instance<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token parameter">html</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>instance <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateDiv</span><span class="token punctuation">(</span> html <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySingletonCreateDiv</span><span class="token punctuation">(</span> <span class="token string">'sven1'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySingletonCreateDiv</span><span class="token punctuation">(</span> <span class="token string">'sven2'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span> <span class="token punctuation">(</span> a <span class="token operator">===</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过引入代理类的方式，我们同样完成了一个单例模式的编写，跟之前不同的是，现在我们把负责管理单例的逻辑移到了代理类 <code>proxySingletonCreateDiv</code> 中。这样一来，<code>CreateDiv </code>就变成了一个普通的类，它跟 <code>proxySingletonCreateDiv</code> 组合起来可以达到单例模式的效果。</p><h3 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">getSingle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> result<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> result <span class="token operator">||</span> <span class="token punctuation">(</span>result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>使用：<span class="token keyword">var</span> <span class="token function-variable function">createLoginLayer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"我是登录浮窗"</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> div<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> createSingleLoginLayer <span class="token operator">=</span> <span class="token function">getSingle</span><span class="token punctuation">(</span>createLoginLayer<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"loginBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> loginLayer <span class="token operator">=</span> <span class="token function">createSingleLoginLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  loginLayer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//    下面我们再试试创建唯一的 iframe 用于动态加载第三方页面：</span><span class="token keyword">var</span> createSingleIframe <span class="token operator">=</span> <span class="token function">getSingle</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> iframe<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"loginBtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> loginLayer <span class="token operator">=</span> <span class="token function">createSingleIframe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  loginLayer<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://baidu.com"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>策略模式指的是定义一系列的算法，并且把它们封装起来。</p><p>计算奖金、缓动动画、表单校验、不同折扣计算等等方面都可以用到策略模式。避免if-else Switch。</p><ol><li>策略模式利用组合、委托和多态等技术和思想，可以有效地避免多重条件选择语句。 </li><li>策略模式提供了对开放—封闭原则的完美支持，将算法封装在独立的 strategy 中，使得它们易于切换，易于理解，易于扩展。 </li><li>策略模式中的算法也可以复用在系统的其他地方，从而避免许多重复的复制粘贴工作。 </li><li>在策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ol><h3 id="文本输入框对应多种校验规则"><a href="#文本输入框对应多种校验规则" class="headerlink" title="文本输入框对应多种校验规则"></a>文本输入框对应多种校验规则</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http:// xxx.com/register<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>registerForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        请输入用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        请输入密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        请输入手机号码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phoneNumber<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">/***********************策略对象**************************/</span>        <span class="token keyword">var</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token function-variable function">isNonEmpty</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">minLength</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> length<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function-variable function">isMobile</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> errorMsg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^1[3|5|8][0-9]&#123;9&#125;$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">/***********************Validator 类**************************/</span>        <span class="token keyword">var</span> <span class="token function-variable function">Validator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Validator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> rules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rule<span class="token punctuation">;</span> rule <span class="token operator">=</span> rules<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">rule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> strategyAry <span class="token operator">=</span> rule<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> rule<span class="token punctuation">.</span>errorMsg<span class="token punctuation">;</span>                    self<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">var</span> strategy <span class="token operator">=</span> strategyAry<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        strategyAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                        strategyAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> strategies<span class="token punctuation">[</span>strategy<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> strategyAry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Validator</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">start</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> validatorFunc<span class="token punctuation">;</span> validatorFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token function">validatorFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">/***********************客户调用代码**************************/</span>        <span class="token keyword">var</span> registerForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'registerForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token function-variable function">validataFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNonEmpty'</span><span class="token punctuation">,</span>                <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'用户名不能为空'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span>                <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'用户名长度不能小于 10 位'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>password<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:6'</span><span class="token punctuation">,</span>                <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'密码长度不能小于 6 位'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registerForm<span class="token punctuation">.</span>phoneNumber<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isMobile'</span><span class="token punctuation">,</span>                <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'手机号码格式不正确'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> errorMsg<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        registerForm<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token function">validataFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p><strong>代理模式是为一个对象提供一个代用品或占位符，以便控制对它的访问。</strong></p><p>举个例子： 在四月一个晴朗的早晨，小明遇见了他的百分百女孩，我们暂且称呼小明的女神为 A。两天之后，小明决定给 A 送一束花来表白。刚好小明打听到 A 和他有一个共同的朋 友 B，于是内向的小明决定让 B 来代替自己完成送花这件事情。<br>假设当 A 在心情好的时候收到花，小明表白成功的几率有 60%，而当 A 在心情差的时候收到花，小明表白的成功率无限趋近于 0。<br>小明跟 A 刚刚认识两天，还无法辨别 A 什么时候心情好。如果不合时宜地把花送给 A，花被直接扔掉的可能性很大，这束花可是小明吃了 7 天泡面换来的。<br>但是 A 的朋友 B 却很了解 A，所以小明只管把花交给 B，B 会监听 A 的心情变化，然后选择 A 心情好的时候把花转交给 A，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Flower</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">sendFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> flower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">listenGoodMood</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 监听 A 的好心情</span>      <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到花 "</span> <span class="token operator">+</span> flower<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">listenGoodMood</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 假设 10 秒之后 A 的心情变好</span>      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>xiaoming<span class="token punctuation">.</span><span class="token function">sendFlower</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h2><p>虽然这只是个虚拟的例子，但我们可以从中找到两种代理模式的身影。代理 B 可以帮助 A 过滤掉一些请求，比如送花的人中年龄太大的或者没有宝马的，这种请求就可以直接在代理 B 处被拒绝掉。这种代理叫作保护代理。A 和 B 一个充当白脸，一个充当黑脸。白脸 A 继续保持 良好的女神形象，不希望直接拒绝任何人，于是找了黑脸 B 来控制对 A 的访问。<br>另外，假设现实中的花价格不菲，导致在程序世界里，new Flower 也是一个代价昂贵的操作， 那么我们可以把 new Flower 的操作交给代理 B 去执行，代理 B 会选择在 A 心情好时再执行 new Flower，这是代理模式的另一种形式，叫作虚拟代理。虚拟代理把一些开销很大的对象，延迟到 真正需要它的时候才去创建。代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">receiveFlower</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">flower</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">listenGoodMood</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 监听 A 的好心情</span>      <span class="token keyword">var</span> flower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 延迟创建 flower 对象</span>      <span class="token constant">A</span><span class="token punctuation">.</span><span class="token function">receiveFlower</span><span class="token punctuation">(</span>flower<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>保护代理用于控制不同权限的对象对目标对象的访问，但在 JavaScript 并不容易实现保护代理，因为我们无法判断谁访问了某个对象。而虚拟代理是最常用的一种代理模式，本章主要讨论的也是虚拟代理。</p></blockquote><h2 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> myImage <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> imgNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setSrc</span><span class="token operator">:</span>  <span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>      imgNode<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> proxyImage <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span><span class="token punctuation">&#123;</span>    myImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">setSrc</span><span class="token operator">:</span>  <span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token punctuation">&#123;</span>      myImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">"file:// /C:/Users/svenzeng/Desktop/loading.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxyImage<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token string">"http:// imgcache.qq.com/music/photo/k/000GGDys0yA0Nk.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理的意义"><a href="#代理的意义" class="headerlink" title="代理的意义"></a>代理的意义</h2><p>在说明代理的意义之前，我们先引入一个面向对象涉及的原则—-<strong>单一职责原则</strong></p><blockquote><p>单一职责原则 ：一个类（对象和函数等），应该仅有一个引起它变化的原因。如果一个对象承担了多项职责，也就意味着这个对象将变得巨大，引起它变化的原因可能有多个。面向对象设计鼓励将行为分布到细粒度的对象之中，如果一个对象承担的职责过多，等于把这些职责耦合到了一起，这种耦合会导致脆弱和低内聚的设计。当变化发生时，设计可能会遭到意外的破坏。</p></blockquote><h2 id="虚拟代理合并HTTP请求"><a href="#虚拟代理合并HTTP请求" class="headerlink" title="虚拟代理合并HTTP请求"></a>虚拟代理合并HTTP请求</h2><p>假设我们在做一个文件同步的功能，当我们选中一个 <code>checkbox</code> 的时候，它对应的文件就会被同步到另外一台备用服务器上面，我们先在页面中放置好checkbox节点，接下来，给这些 <code>checkbox</code> 绑定点击事件，并且在点击的同时往另一台服务器同步文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">synchronousFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始同步文件，id 为: '</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> checkbox<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  c<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">synchronousFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以通过一个代理函数 <code>proxySynchronousFile</code>来收集一段时间之内的请求，最后一次性发送给服务器。比如我们等待 2 秒之后才把这 2 秒之内需要同步的文件 ID 打包发给服务器，如果不是对实时性要求非常高的系统，2 秒的延迟不会带来太大副作用，却能大大减轻服务器的压力。代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">synchronousFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始同步文件，id 为: '</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> proxySynchronousFile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 保存一段时间内需要同步的 ID </span>    timer<span class="token punctuation">;</span> <span class="token comment">// 定时器</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 保证不会覆盖已经启动的定时器</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">synchronousFile</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 秒后向本体发送需要同步的 ID 集合</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空定时器</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 清空 ID 集合</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkbox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span> c <span class="token operator">=</span> checkbox<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  c<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>checked <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">proxySynchronousFile</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="虚拟代理在惰性加载中的应用"><a href="#虚拟代理在惰性加载中的应用" class="headerlink" title="虚拟代理在惰性加载中的应用"></a>虚拟代理在惰性加载中的应用</h2><p><code>miniConsole.js</code>可以帮助开发者在浏览器上进行一些简单调试工作，<code>miniConsole.log(1)</code>,这句话会在页面中创建一个 div，并且把 log 显示在 div 里面，miniConsole.js的代码量大概有1000行左右，也许我们并不想一开始就加载这么大的JS文件，因为也许并不是每个用户都需要打印 log。我们希望在有必要的时候才开始加载它，比如当用户按下 F2 来主动唤出控制台的时候。<br>在miniConsole.js加载之前，为了能够让用户正常地使用里面的API，通常我们的解决方案是用一个占位的miniConsole代理对象来给用户提前使用，这个代理对象提供给用户的接口，跟实际的miniConsole是一样的。<br>用户使用这个代理对象来打印log的时候，并不会真正在控制台内打印日志，更不会在页面中创建任何DOM节点。即使我们想这样做也无能为力，因为真正的miniConsole.js还没有被加载。<br>于是，我们可以把打印log的请求都包裹在一个函数里面，这个包装了请求的函数就相当于其他语言中命令模式中的<code>Command</code>对象。随后这些函数将全部被放到缓存队列中，这些逻辑都是在miniConsole代理对象中完成实现的。等用户按下F2唤出控制台的时候，才开始加载真正的miniConsole.js的代码，加载完成之后将遍历miniConsole代理对象中的缓存函数队列，同时依次执行它们。<br>当然，请求的到底是什么对用户来说是不透明的，用户并不清楚它请求的是代理对象，所以他可以在任何时候放心地使用miniConsole对象。<br>未加载真正的miniConsole.js之前的代码如下:</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> miniConsole <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">log</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> miniConsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>miniConsole<span class="token punctuation">,</span>args<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>miniConsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户按下 F2时，开始加载真正的miniConsole.js，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">113</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'miniConsole.js'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>miniConsole.js代码：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">miniConsole<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function-variable function">log</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//真正代码略</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然我们没有给出miniConsole.js的真正代码，但这不影响我们理解其中的逻辑。当然这里还要注意一个问题，就是我们要保证在F2被重复按下的时候，miniConsole.js只被加载一次。另外我们整理一下miniConsole代理对象的代码，使它成为一个标准的虚拟代理对象，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> miniConsole <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">113</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      script<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> cache<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'miniConsole.js'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只加载一次miniConsole.js &#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">log</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> miniConsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>miniConsole<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  miniConsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开始打印log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h2><p><strong>缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。</strong></p><blockquote><p>缓存代理的例子—计算乘积</p></blockquote><p>先创建一个用于求乘积的函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始计算乘积'</span><span class="token punctuation">)</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   a <span class="token operator">*=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token function">mult</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在加入缓存代理函数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> proxyMult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">mult</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存代理用于Ajax异步请求数据"><a href="#缓存代理用于Ajax异步请求数据" class="headerlink" title="缓存代理用于Ajax异步请求数据"></a>缓存代理用于Ajax异步请求数据</h2><p>我们在常常在项目中遇到分页的需求，同一页的数据理论上只需要去后台拉取一次，这些已经拉取到的数据在某个地方被缓存之后，下次再请求同一页的时候，便可以直接使用之前的数据。<br>显然这里也可以引入缓存代理，实现方式跟计算乘积的例子差不多，唯一不同的是，请求数据是个异步的操作，我们无法直接把计算结果放到代理对象的缓存中，而是要通过回调的方式。具体代码不再赘述，读者可以自行实现。</p><h2 id="用高阶函数动态创建代理"><a href="#用高阶函数动态创建代理" class="headerlink" title="用高阶函数动态创建代理"></a>用高阶函数动态创建代理</h2><p>通过传入高阶函数这种更加灵活的方式，可以为各种计算方法创建缓存代理。现在这些计算方法被当作参数传入一个专门用于创建缓存代理的工厂中，这样一来，我们就可以为乘法、加法、减法等创建缓存代理，代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/****************计算乘积*****************/</span><span class="token keyword">var</span> <span class="token function-variable function">mult</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> a <span class="token operator">*</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/****************计算加和*****************/</span><span class="token keyword">var</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> a <span class="token operator">+</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/****************创建缓存代理的工厂*****************/</span><span class="token keyword">var</span> <span class="token function-variable function">createProxyFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> proxyMult<span class="token operator">=</span><span class="token function">createProxyFactory</span><span class="token punctuation">(</span>mult<span class="token punctuation">)</span><span class="token punctuation">,</span>proxyPlus<span class="token operator">=</span><span class="token function">createProxyFactory</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">proxyMult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：24 </span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">proxyMult</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：24 </span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">proxyPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：10 </span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">proxyPlus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="发布订阅模式-观察者模式"><a href="#发布订阅模式-观察者模式" class="headerlink" title="发布订阅模式(观察者模式)"></a>发布订阅模式(观察者模式)</h1><p><strong>一对多的关系</strong> ，当一个对象的状态发生改变，所有依赖于它的对象都得通知</p><blockquote><p>举例：</p><ol><li>发布者</li><li>缓存列表</li><li>发布消息（当事件触发的时候（状态发生变化），依次执行回调函数）</li></ol></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> salesOffices <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> Event <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">clinetList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token function-variable function">listen</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token function-variable function">trigger</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取出第一个元素-key</span>       <span class="token keyword">const</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">installEvent</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">installEvent</span><span class="token punctuation">(</span>salesOffices<span class="token punctuation">,</span> Event<span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'square88'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> squareMeter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'张三问价格:'</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'张三问面积:'</span><span class="token punctuation">,</span> squareMeter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'square188'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> squareMeter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'李四问价格:'</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'李四问面积:'</span><span class="token punctuation">,</span> squareMeter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'square1188'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price<span class="token punctuation">,</span> squareMeter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王五问价格:'</span><span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'王五问面积:'</span><span class="token punctuation">,</span> squareMeter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'square88'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'square188'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">)</span>salesOffices<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'square1188'</span><span class="token punctuation">,</span> <span class="token number">22000</span><span class="token punctuation">,</span> <span class="token number">1188</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">张三问价格: 1000张三问面积: 88李四问价格: 2000李四问面积: 188王五问价格: 22000王五问面积: 1188<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用ES6-Class实现：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">&#123;</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>clinetList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span>   <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取出第一个元素-key</span>       <span class="token keyword">const</span> fns <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clinetList<span class="token punctuation">[</span>key<span class="token punctuation">]</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SalesOffices</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span> <span class="token punctuation">&#123;</span>   <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> salesOffices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalesOffices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/02/20/%E9%97%AD%E5%8C%85/"/>
      <url>/2022/02/20/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook</title>
      <link href="/2022/02/20/React-Hook/"/>
      <url>/2022/02/20/React-Hook/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">官方文档</a>，可以用一些方式来<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010">快速校验</a>学习成果。</p><p>基础 Hooks 库：<a href="https://ahooks.js.org/zh-CN/">ahooks</a>，来补充一些基础 JS 能力的 Hooks 实现，有兴趣的话，可以看一下其源码。</p><p>最佳实践</p><p>在使用 React hooks 需遵循一些最佳实践：</p><p>react-hooks&#x2F;exhaustive-deps</p><p>这是 React hooks 的 ESLint 规则中最核心的一条，要求开发者穷尽 hook 的依赖，以减少因为遗漏了数据依赖关系而导致的 bug（这种 bug 通常 debug 成本很高）。</p><p>开发者如果选择在某处禁用该规则，应注释具体原因，否则该处代码将难以维护。</p><p>请扩展阅读以下官方 QA：</p><ol><li><a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies">在依赖列表中省略函数是否安全？</a></li><li>[如果我的 effect 的依赖频繁变化，我该怎么办？]</li></ol><p>useMemo</p><p>useMemo（及 useCallback）很容易被滥用，通常因为开发者会犯过早优化的错误。性能优化总是会有成本，但并不总是带来好处。不必要的 useMemo 的使用会导致以下问题：</p><ol><li>useMemo 本身会增加代码执行成本。</li><li>useMemo 有连锁效应，如果你的一个 useMemo 依赖了另一个数组&#x2F; Object &#x2F;函数…，你可能会被迫对该依赖也使用 useMemo&#x2F;useCallback。最后你会使用一连串的 useMemo。</li><li>useMemo 一旦被使用之后，就很难被清理。开发者很难评估它当时是为了解决什么问题，深入分析的成本也很高，因此最终就不会有人选择动它。</li></ol><p>所以我们推荐的策略是，默认不使用 useMemo&#x2F;useCallback，直到你确实遇到以下问题时才考虑使用：</p><ol><li>有依赖在重复触发不必要的副作用（比如重复发送请求）。</li><li>页面有明显的性能问题（可能由过多的重渲染或者量级巨大的循环计算造成）。<br>  ○ 这也是开发者过早优化时潜意识中所担心的问题，但现代计算机的性能对于网页来说是过剩的，React 底层也对重渲染做了大量优化，因此绝大部分情况下开发者不需要提前优化，应等到问题真的出现再做解决。</li><li>重渲染导致了一些特殊组件的 UI 异常（比如图表每次重渲染都播放初始化动画）。</li></ol><blockquote><p>在调查组件渲染和性能问题时，可以使用 <a href="https://zh-hans.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html">React Profiler</a>。</p></blockquote><p>另一种误用 useMemo 的场景是用空依赖的 useMemo 来保证一个非 primitive 类型常量的引用不变。这是一个错误的使用，因为常量无关输入，不需要被“记住”。应该直接定义在组件外：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Bad</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Bar prop<span class="token operator">=</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token comment">// Good</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Bar prop<span class="token operator">=</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/02/20/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/20/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><a href="https://github.com/wmshero/leetcode-javascript/issues/3">合并两个有序链表（简单） 21</a></p><h2 id="递归与回溯"><a href="#递归与回溯" class="headerlink" title="递归与回溯"></a>递归与回溯</h2><p><a href="https://github.com/wmshero/leetcode-javascript/issues/1">跳水板-面试题 16.11</a><br><a href="https://github.com/wmshero/leetcode-javascript/issues/2">顺次数-1291</a><br><a href="https://github.com/wmshero/leetcode-javascript/issues/4">无重复字符的最长子串</a><br><a href="https://github.com/wmshero/leetcode-javascript/issues/6">深度平铺数组</a></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><a href="https://github.com/wmshero/leetcode-javascript/issues/5">路径总长</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://github.com/wmshero/leetcode-javascript/issues/7">将数字转化为千分位格式</a><br><a href="https://github.com/wmshero/leetcode-javascript/issues/9">合并对象</a></p><h1 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h1><p><a href="https://github.com/wmshero/leetcode-javascript/issues/8">解析网址参数</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写async await</title>
      <link href="/2022/02/20/%E6%89%8B%E5%86%99async-await/"/>
      <url>/2022/02/20/%E6%89%8B%E5%86%99async-await/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有人说<code>async </code>函数是<code>generator </code>函数的语法糖，接下来使用generator函数实现async。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上代码使用generator函数表示如下：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是generator函数不会自动执行，每次调用它的next方法，会停留在下一个yield的位置。所以，我们需要编写一个自动执行函数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>asyncToGenerator接受一个generator函数，返回一个promise</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// await被编译成了yield</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data2: '</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> dataPromise <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dataPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// data1的value被拿到了 继续调用next并且传递给data</span>    <span class="token keyword">var</span> data2Promise <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>        <span class="token comment">// console.log('data: ', data);</span>    <span class="token comment">// 此时就会打印出data</span>        data2Promise<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// data2的value拿到了 继续调用next并且传递value2</span>         gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span>                 <span class="token comment">// console.log('data2: ', data2);</span>        <span class="token comment">// 此时就会打印出data2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">generatorFunc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generatorFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> generatorResult                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    generatorResult <span class="token operator">=</span> gen<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> generatorResult                <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">'throw'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * async的执行原理 * 其实就是自动执行generator函数 * 暂时不考虑genertor的编译步骤（更复杂） */</span><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 这样的一个async函数 应该再1秒后打印data</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">return</span> data<span class="token punctuation">&#125;</span><span class="token comment">// async函数会被编译成generator函数 (babel会编译成更本质的形态，这里我们直接用generator)</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// await被编译成了yield</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data2: '</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data <span class="token operator">+</span> <span class="token string">'123'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">generatorFunc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generatorFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> generatorResult        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          generatorResult <span class="token operator">=</span> gen<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> generatorResult        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"throw"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> testGAsync <span class="token operator">=</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span>testG<span class="token punctuation">)</span><span class="token function">testGAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2022/02/20/javascript/"/>
      <url>/2022/02/20/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p> 闭包是能够读取其他函数内部的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。</p><h1 id="类的创建和继承"><a href="#类的创建和继承" class="headerlink" title="类的创建和继承"></a>类的创建和继承</h1><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>HTML中与<code>javascript</code>交互是通过<strong>事件驱动</strong>来实现的，例如鼠标点击事件<code>onclick</code>、页面的滚动事件<code>onscroll</code>等等，可以向文档或者文档中的元素 添加 事件侦听器 来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下 <strong>“事件流”</strong> 的概念。</p><blockquote><p>事件流描述的是从页面中接收事件的顺序，DOM2级事件流包括下面几个阶段</p></blockquote><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p>addEventListener: addEventListener 是DOM2 级事件新增的指定事件处理程序的操作，这个方法接收3个参数：</p><ol><li>要处理的事件名</li><li>作为事件处理程序的函数</li><li>一个布尔值。<br>最后这个布尔值参数如果是true，表示在<strong>捕获阶段调用事件处理程序</strong>；如果是false，表示在<strong>冒泡阶段调用事件处理程序</strong>。</li></ol><blockquote><p>IE只支持事件冒泡</p></blockquote><h1 id="js的各种位置"><a href="#js的各种位置" class="headerlink" title="js的各种位置"></a>js的各种位置</h1><blockquote><p>比如clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop的区别？</p></blockquote><ul><li><code>clientHeight</code>：可视区域的高度，不包含border和滚动条</li><li><code>offsetHeight</code>：可视区域的高度，包含了border和滚动条</li><li><code>scrollHeight</code>：所有区域的高度，包含了因为滚动被隐藏的部分。</li><li><code>clientTop</code>：边框border的厚度，在未指定的情况下一般为0</li><li><code>scrollTop</code>：滚动后被隐藏的高度，获取对象相对于由offsetParent属性指定的父坐标(css定位的元素或body元素)距离顶端的高度。</li></ul><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>必要性： 由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。</p><p>这段话解释了为什么需要系统需要垃圾回收，JS不像C&#x2F;C++，他有自己的一套垃圾回收机制。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当他确定了一个对象是无用的时候，他就知道不再需要这个对象，可以把它所占用的内存释放掉了。例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token string">"world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment">//这时，会释放掉"hello world"，释放内存以便再引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>垃圾回收的方法：标记清除、计数引用。</p></blockquote><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>这是最常见的垃圾回收方式，当变量进入环境时，就标记这个变量为”进入环境“,从逻辑上讲，永远不能释放进入环境变量所占用的内存，只要执行流程进入相应的环境，就可能用到他们。当离开环境时，就标记为离开环境。</p><p>垃圾回收器在运行的时候会给存储在内存中的变量都加上标记（所有都加），然后去掉环境变量中的变量，以及被环境变量中的变量所引用的变量（条件性去除标记），删除所有被标记的变量，删除的变量无法在环境变量中被访问所以会被删除，最后垃圾回收器，完成了内存的清除工作，并回收他们所占用的内存。</p><h2 id="计数引用"><a href="#计数引用" class="headerlink" title="计数引用"></a>计数引用</h2><p>另一种不太常见的方法就是引用计数法，引用计数法的意思就是每个值没引用的次数，当声明了一个变量，并用一个引用类型的值赋值给改变量，则这个值的引用次数为1,；相反的，如果包含了对这个值引用的变量又取得了另外一个值，则原先的引用值引用次数就减1，当这个值的引用次数为0的时候，说明没有办法再访问这个值了，因此就把所占的内存给回收进来，这样垃圾收集器再次运行的时候，就会释放引用次数为0的这些值。</p><p>用引用计数法会存在内存泄露，下面来看原因：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objB<span class="token punctuation">;</span>objB<span class="token punctuation">.</span>anotherObject <span class="token operator">=</span> objA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这个例子里面，objA和objB通过各自的属性相互引用，这样的话，两个对象的引用次数都为2，在采用引用计数的策略中，由于函数执行之后，这两个对象都离开了作用域，函数执行完成之后，因为计数不为0，这样的相互引用如果大量存在就会导致内存泄露。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest测试</title>
      <link href="/2022/01/20/jest%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/01/20/jest%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试和集成测试"><a href="#单元测试和集成测试" class="headerlink" title="单元测试和集成测试"></a>单元测试和集成测试</h1><ul><li>单元测试： 对软件的最小可测试单元进行检查和验证。前端所说的单元测试就是对一个模块进行测试，也就是说前端测试的时候，你测试的东西一定是一个模块。</li><li>集成测试：也叫组装测试或者联合测试。在单元测试的基础上，将所有模块按照涉及要求组装成子系统或系统，进行集成测试。</li></ul><h1 id="常用匹配符"><a href="#常用匹配符" class="headerlink" title="常用匹配符"></a>常用匹配符</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> dabaojian <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> test1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dabaojian<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'付款 300元'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'贵了'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'测试严格相等'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'测试严格相等'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeNull测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeUndefined测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 只要定义过了，都可以匹配成功</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeDefined测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'你好'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//判断是否为真，null 和 undefined ,false,0无法通过，其他都是可以通过测试</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeTruthy测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">1</span>    <span class="token comment">// const a=0</span>    <span class="token comment">// const a=true</span>    <span class="token comment">// const a=&#123;&#125; </span>    <span class="token comment">// const a=[]</span>    <span class="token comment">// const a='hi'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeFalsy测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment">// const a=false</span>    <span class="token comment">// const a=null </span>    <span class="token comment">// const a=undefined </span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 大于</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThan'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 小于</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeLessThan'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 大于或等于 （小于等于 toBeLessThanOrEqual）</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThanOrEqual'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">11</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 消除js浮点精度错误的匹配器</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeCloseTo'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num1<span class="token operator">=</span><span class="token number">0.1</span>    <span class="token keyword">const</span> num2<span class="token operator">=</span><span class="token number">0.2</span>    <span class="token function">expect</span><span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 字符串匹配</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toMatch'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> str<span class="token operator">=</span><span class="token string">'苹果，荔枝，栗子'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">)</span>    <span class="token comment">// expect(str).toMatch(/荔枝/)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 数组匹配</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toContain'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token string">'荔枝'</span><span class="token punctuation">,</span><span class="token string">'栗子'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 异常处理</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toThrow'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">throwNewErrorFunc</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 相反/取反</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'not toThrow'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">throwNewErrorFunc</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData1测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//断言，必须需要执行一次expect方法才可以通过测试</span>    <span class="token keyword">return</span> fetchData1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 断言，必须执行一次expect</span>    <span class="token keyword">return</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// async...await 测试</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 或者</span>    <span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">success</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="jest中的四个钩子函数"><a href="#jest中的四个钩子函数" class="headerlink" title="jest中的四个钩子函数"></a>jest中的四个钩子函数</h1><h2 id="beforeAll"><a href="#beforeAll" class="headerlink" title="beforeAll"></a>beforeAll</h2><p>在所有测试用例之前进行执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeAll 在所有测试用例之前进行执行'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="afterAll"><a href="#afterAll" class="headerlink" title="afterAll"></a>afterAll</h2><p>在所有测试用例之后进行执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterAll 在所有测试用例之后进行执行'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h2><p>在每个测试用例前都会执行一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach 在每个测试用例前都会执行一次'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="afterEach"><a href="#afterEach" class="headerlink" title="afterEach"></a>afterEach</h2><p>在每个测试用例后都会执行一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach 在每个测试用例前都会执行一次'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="测试用例分组"><a href="#测试用例分组" class="headerlink" title="测试用例分组"></a>测试用例分组</h1><p><code>describe()</code>分组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'数字相关'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 大于</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 小于</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeLessThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 大于或等于 （小于等于 toBeLessThanOrEqual）</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThanOrEqual'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">11</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 消除js浮点精度错误的匹配器</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeCloseTo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">0.1</span>        <span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">0.2</span>        <span class="token function">expect</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'异步相关'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData1测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//断言，必须需要执行一次expect方法才可以通过测试</span>        <span class="token keyword">return</span> fetchData1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 断言，必须执行一次expect</span>        <span class="token keyword">return</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// async...await 测试</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 或者</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="钩子函数的作用域"><a href="#钩子函数的作用域" class="headerlink" title="钩子函数的作用域"></a>钩子函数的作用域</h1><p>jest中钩子函数的作用域有下面三个特色：</p><ul><li>钩子函数在父级分组可作用域子集，类似继承</li><li>钩子函数同级分组作用域互不干扰，各起作用</li><li>先执行外部的钩子函数，再执行内部的钩子函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
