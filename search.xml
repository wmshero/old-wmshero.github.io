<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Portals</title>
      <link href="/2022/03/14/Portals/"/>
      <url>/2022/03/14/Portals/</url>
      
        <content type="html"><![CDATA[<h1 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h1><p>Portals 提供了一种将<strong>子节点</strong>渲染到存在于<strong>父组件以外</strong>的DOM节点的优秀的方案。</p><pre class="line-numbers language-none"><code class="language-none">ReactDOM.createPortal(child, container)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>child: 任何可渲染的 React 子元素，例如一个元素，字符串或 fragment。<br>container: 一个DOM 元素</p><blockquote><p>一个 portal 的典型用例是当父组件有 overflow: hidden 或 z-index 样式时，但你需要子组件能够在视觉上“跳出”其容器。例如，对话框、悬浮卡以及提示框：</p></blockquote><p>示例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal-root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> appRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'app-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> modalRoot <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'modal-root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Modal</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modalRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modalRoot<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleShow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleShow</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleHide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleHide</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">handleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token function">handleHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">showModal</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showModal <span class="token operator">?</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Modal<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"modal"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            With a portal<span class="token punctuation">,</span> we can render content into a different            part <span class="token keyword">of</span> the <span class="token constant">DOM</span><span class="token punctuation">,</span> <span class="token keyword">as</span> <span class="token keyword">if</span> it were any other React child<span class="token punctuation">.</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          This is being rendered inside the #modal<span class="token operator">-</span>container div<span class="token punctuation">.</span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleHide<span class="token punctuation">&#125;</span><span class="token operator">></span>Hide modal<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>    <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        This div has overflow<span class="token operator">:</span> hidden<span class="token punctuation">.</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleShow<span class="token punctuation">&#125;</span><span class="token operator">></span>Show modal<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token punctuation">&#123;</span>modal<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> appRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> Portals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形和平铺结构互转</title>
      <link href="/2022/03/13/%E6%A0%91%E5%BD%A2%E5%92%8C%E5%B9%B3%E9%93%BA%E7%BB%93%E6%9E%84%E4%BA%92%E8%BD%AC/"/>
      <url>/2022/03/13/%E6%A0%91%E5%BD%A2%E5%92%8C%E5%B9%B3%E9%93%BA%E7%BB%93%E6%9E%84%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="1-将树形转换成平铺数据结构"><a href="#1-将树形转换成平铺数据结构" class="headerlink" title="1. 将树形转换成平铺数据结构"></a>1. 将树形转换成平铺数据结构</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> entry <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                      <span class="token literal-property property">dd</span><span class="token operator">:</span> <span class="token string">'abcdd'</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">ee</span><span class="token operator">:</span> <span class="token string">'adee'</span>              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>              <span class="token literal-property property">f</span><span class="token operator">:</span> <span class="token string">'af'</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'a.b.c.dd'</span><span class="token operator">:</span> <span class="token string">'abcdd'</span><span class="token punctuation">,</span>          <span class="token string-property property">'a.d.ee'</span><span class="token operator">:</span> <span class="token string">'adee'</span><span class="token punctuation">,</span>          <span class="token string-property property">'a.f'</span><span class="token operator">:</span> <span class="token string">'af'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解答一：递归"><a href="#解答一：递归" class="headerlink" title="解答一：递归"></a>解答一：递归</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>preKey<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> newKey<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>preKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">flat</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>newKey<span class="token punctuation">]</span><span class="token operator">=</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解答二：-while循环-队列"><a href="#解答二：-while循环-队列" class="headerlink" title="解答二： while循环-队列"></a>解答二： while循环-队列</h2><h1 id="2-平铺转换成树形数据结构"><a href="#2-平铺转换成树形数据结构" class="headerlink" title="2. 平铺转换成树形数据结构"></a>2. 平铺转换成树形数据结构</h1>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>setTimeout</title>
      <link href="/2022/03/13/setTimeout/"/>
      <url>/2022/03/13/setTimeout/</url>
      
        <content type="html"><![CDATA[<p>小试一题： 0-99的乱序输出，如何改成顺序输出</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.立即执行函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>setTimout的第二个参数</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>setTimeout的第三个参数<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> setTimeout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/2022/03/13/js%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/13/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h1><blockquote><p><strong>AO对象</strong>： Activation Object ，活动性对象，执行期上下文（作用域） </p></blockquote><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><ol><li>寻找形参和变量声明</li><li>实参值赋值给形参</li><li>找函数声明，赋值</li><li>执行</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ƒ a() &#123; &#125; 先找函数声明</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    a <span class="token operator">=</span> <span class="token number">1</span>    b <span class="token operator">=</span> <span class="token number">2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><blockquote><p><strong>GO对象</strong>： Gobal Object ，全局对象，GO对象&#x3D;&#x3D;&#x3D;window对象。</p></blockquote><ol><li>找变量</li><li>找函数声明</li><li>执行</li></ol><blockquote><p>下面这题为什么打印出1 ？因为先找函数声明，此时a是函数，然后找赋值，此时a被覆盖为1了。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> a<span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面来个综合的预编译案例：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> c<span class="token punctuation">;</span>    <span class="token function-variable function">c</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>     a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    f <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//function sum()&#123;&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 </span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2022/03/11/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2022/03/11/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty</title>
      <link href="/2022/03/10/defineProperty/"/>
      <url>/2022/03/10/defineProperty/</url>
      
        <content type="html"><![CDATA[<p>点击这里<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>，了解更多</p><p><code>Object.defineProperty(obj, &#39;key&#39;, descriptor);</code></p><p>其中 <code>descriptor</code> 可拥有的键值</p><ul><li><code>configurable</code> 表示对象的属性是否可以被删除，以及除 value 和 writable 特性外的其他特性是否可以被修改。</li><li><code>enumerable</code>  是否可以在 for…in 循环和 Object.keys() 中被枚举。</li><li><code>value</code> 该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。</li><li><code>writable</code> 可写的</li><li><code>get</code></li><li><code>set</code></li></ul><h1 id="1-使-a-1-amp-amp-a-2-amp-amp-a-3-为true"><a href="#1-使-a-1-amp-amp-a-2-amp-amp-a-3-为true" class="headerlink" title="1. 使 a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3 为true"></a>1. 使 <code>a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3</code> 为true</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> _default<span class="token operator">=</span><span class="token number">0</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">++</span>_default    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'相等哦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-console-log-输出-abc…z"><a href="#2-console-log-输出-abc…z" class="headerlink" title="2. console.log(_+_+_+_+) 输出 abc…z"></a>2. <code>console.log(_+_+_+_+)</code> 输出 abc…z</h1><p>利用 <code>Object.defineProperty</code>和<code>ASCII</code>码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">||</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_ch <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>_c            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_ch        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_ <span class="token operator">+</span> _ <span class="token operator">+</span> _ <span class="token operator">+</span> _ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abcde</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-使-a-1-b-2-c-3-变成-a-3-b-3-c-5"><a href="#3-使-a-1-b-2-c-3-变成-a-3-b-3-c-5" class="headerlink" title="3. 使   {a: 1, b: 2, c: 3 }变成 { a: 3, b: 3, c: 5 }"></a>3. 使   <code>&#123;a: 1, b: 2, c: 3 &#125;</code>变成<code> &#123; a: 3, b: 3, c: 5 &#125;</code></h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token operator">++</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>          Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>              <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token literal-property property">value</span><span class="token operator">:</span> k <span class="token operator">===</span> <span class="token string">'b'</span> <span class="token operator">?</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">++</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*      &#123;          a:3,          b:3,          c:5      &#125;      */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>性能优化</title>
      <link href="/2022/03/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2022/03/10/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><blockquote><p>CDN （内容分发网络），由 分发服务系统、负载均衡系统、运营管理系统 组成</p></blockquote><p>CDN 一般用来托管web 资源，可供下载的资源。</p><ol><li>在<strong>性能方面</strong>，引入CDN的作用在于：</li></ol><ul><li>用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</li><li>部分资源请求分配给CDN，减少服务器的负载</li></ul><ol start="2"><li>在<strong>安全方面</strong>，CDN有助于 防御 DDos，MITM等网络攻击：</li></ol><ul><li>针对于 DDos：通过监控分析异常流量，限制其请求频率</li><li>针对MITM：从源服务器到CDN节点到ISP，全链路HTTPS通信。</li></ul><blockquote><p>除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</p></blockquote><h2 id="CDN的原理"><a href="#CDN的原理" class="headerlink" title="CDN的原理"></a>CDN的原理</h2><p>CDN和DNS有着密不可分的联系，首先看一下<strong>DNS的解析域名过程</strong>。在浏览器输入 <code>www.test.com</code> 的解析过程如下：</p><ol><li>检查浏览器缓存</li><li>检查操作系统缓存，常见的入hosts文件</li><li>检查路由器缓存</li><li>如果前几步都没找到，会向ISP（网络服务提供商）的LDNS服务器查询</li><li>如果LDNS服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：</li></ol><ul><li>根服务器 返回 顶级域名（TLD）服务器 如<code>.com</code>,<code>.cn</code>,<code>.org</code>等的地址，该例子中会返回<code>.com</code>的地址</li><li>接着向 顶级域名服务器 发送请求，然后会返回 次级域名（SLD）服务器的地址，本例子会返回 <code>.test</code>的地址</li><li>接着向 次级域名服务器 发送请求，然后会返回通过 域名查询到的 目标IP，本例子会返回 <code> www.test.com</code>的地址</li><li>Local DNS Server会缓存结果，并返回给用户，缓存在系统中。</li></ul><p><strong>CDN的原理：</strong></p><h3 id="1-用户未使用CDN缓存资源的过程："><a href="#1-用户未使用CDN缓存资源的过程：" class="headerlink" title="1). 用户未使用CDN缓存资源的过程："></a>1). 用户未使用CDN缓存资源的过程：</h3><ol><li>浏览器通过DNS对域名进行解析，依次得到此域名对应的IP地址</li><li>浏览器根据得到的IP地址，向域名的服务主机发送数据请求</li><li>服务器向浏览器返回响应数据</li></ol><h3 id="2-用户使用CDN缓存资源的过程："><a href="#2-用户使用CDN缓存资源的过程：" class="headerlink" title="2. 用户使用CDN缓存资源的过程："></a>2. 用户使用CDN缓存资源的过程：</h3><ol><li>对于点击的数据的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给<code>CNAME</code>指向的CDN专用的DNS服务器。</li><li><strong>CND专用DNS服务器</strong>将CND的 全局负载均衡设备IP地址 返回给用户</li><li>用户向CDN的<strong>全局负载均衡设备</strong>发起数据请求</li><li>CDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的<strong>区域负载均衡设备</strong>，告诉用户向这台设备发起请求</li><li>区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备</li><li>全局负载均衡设备把服务器的IP地址返回给用户</li><li>用户向该<strong>缓存服务器</strong>发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603966294889-153271b5-4b9f-4470-b05f-c7a9f030d043.png?x-oss-process=image/resize,w_1500,limit_0" alt="CDN缓存资源过程"></p><h2 id="CDN-的使用场景"><a href="#CDN-的使用场景" class="headerlink" title="CDN 的使用场景"></a>CDN 的使用场景</h2><ul><li><strong>使用第三方的CDN服务：</strong> 如果想要开源一些项目，可以使用第三方的CDN服务</li><li><strong>使用CDN进行静态资源的缓存：</strong> 将自己网站的静态资源放在CDN上，比如js、css、图片等。可以将整个项目放在CDN上，完成一键部署。</li><li><strong>直播传送：</strong> 直播本质上是使用流媒体进行传送，CDN也是支持流媒体传送的，所以直播完全可以使用CDN来提高访问速度。CDN在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。</li></ul><h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>懒加载，也叫做延迟加载，按需加载，指的是长网页中延迟加载图片数据，是一种较好的性能优化的方式。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>图片的加载是由src引起的，当对<code>src</code>赋值时，浏览器就会请求图片资源。根据这个原理，我们使用<code>HTML5</code> 的<code>data-xxx</code>属性来储存图片的路径，在需要加载图片的时候，将<code>data-xxx</code>中图片的路径赋值给src，这样就实现了图片的按需加载，即懒加载。</p><p>懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，<strong>可视区域内的资源就是用户需要的资源</strong>。所以当图片出现在<strong>可视区域</strong>时，获取图片的真实地址并赋值给图片即可。</p><p><strong>知识点：</strong></p><ol><li><code>window.innerHeight</code> 是浏览器可视区的高度</li><li><code>document.body.scrollTop</code> || <code>document.documentElement.scrollTop</code> 是浏览器滚动过的距离</li><li><code>imgs.offsetTop</code> 是元素顶部距离文档顶部的高度（包括滚动条的距离）</li><li>图片加载条件：<code>img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</code></li></ol><h2 id="滚动请求"><a href="#滚动请求" class="headerlink" title="滚动请求"></a>滚动请求</h2><blockquote><p>Tips： 1. <code>element.scrollTop+element.clientHeight&gt;=element.scrollHeight-50 </code> <strong>触底了！</strong></p></blockquote><ol><li>监听滚动，出现可视区域请求</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> handleListenScroll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleListenScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取父级滚动轴距离顶部距离</span>    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> box<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>        <span class="token comment">//获取父级高度</span>    <span class="token keyword">const</span> divHeight <span class="token operator">=</span> box<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">&lt;</span> divHeight <span class="token operator">+</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//  getData()</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>判断是否出现在可视区域还有<code>Element.getBoundingClientRect()</code>方法返回元素的大小及其相对于时视口的位置。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">img<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token operator">&lt;</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="防抖-x2F-节流"><a href="#防抖-x2F-节流" class="headerlink" title="防抖&#x2F;节流"></a>防抖&#x2F;节流</h2><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>当触发事件是，一定时间内没有再触发事件，事件处理函数才会执行一次，如果在设计的时间内，再触发一次事件，就回重新开始延时。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// timer 是在闭包中的</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>当持续的触发事件时，一定时间内只执行一次。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交叉观察者"><a href="#交叉观察者" class="headerlink" title="交叉观察者"></a>交叉观察者</h2><blockquote><p><strong>交叉观察者</strong> 利用 <code>IntersectionObserver</code> 接口 提供一种异步观察<strong>目标元素</strong>与<strong>其祖先元素</strong>或顶级文档视窗（<code>viewport</code>）交叉状态的方法。祖先元素与视窗被称为根（<code>root</code>）</p></blockquote><blockquote><p>注意：IE兼容性，不过可以使用官方的<a href="https://github.com/w3c/IntersectionObserver/tree/main/polyfill">polyfill</a></p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><code>root</code>  所监听对象的具体祖先元素（element）。如果未传入值或者值为null，则默认使用顶级文档的视窗</li><li><code>rootMargin</code>  计算交叉时添加到根(root)边界盒bounding box的矩形偏移量， 可以有效的缩小或扩大根的判定范围从而满足计算需要</li><li><code>thresholds</code>  一个包含阈值的列表, 按升序排列, 列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>disconnect()</code>  使IntersectionObserver对象停止监听工作</li><li><code>observe()</code>  使IntersectionObserver开始监听一个目标元素。</li><li><code>takeRecords()</code>  返回所有观察目标的IntersectionObserverEntry对象数组。</li><li><code>unobserve()</code>  使IntersectionObserver停止监听特定目标元素。</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 发生交叉目标元素集合</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>entries 里返回属性有 <code>boundingClientRect</code> 空间信息 <code>target</code> 目标元素 <code>isIntersecting</code> 是否发生交叉</p><h3 id="监听目标元素"><a href="#监听目标元素" class="headerlink" title="监听目标元素"></a>监听目标元素</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> imgs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observe<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">// 是否发生交叉</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src<span class="token operator">=</span>item<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src            <span class="token comment">// 取消监听</span>            observe<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>target<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">root</span><span class="token operator">:</span>box<span class="token punctuation">,</span>    <span class="token literal-property property">rootMargin</span><span class="token operator">:</span><span class="token string">'20px 0px 100px 0px'</span> <span class="token comment">//偏移，距离底部100px 发送请求</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>imgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//监听目标元素</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="窗口化"><a href="#窗口化" class="headerlink" title="窗口化"></a>窗口化</h1><blockquote><p>只加载当前窗口能显示的DOM元素，当视图变化时，删除隐藏的，添加要显示的DOM就可以保证页面上存在的dom元素数量永远不多，页面就不会卡顿</p></blockquote><p>插件<code>react-window</code></p><p>引用 <code>import &#123; FixedSizeList as List &#125; from &#39;react-window&#39;;</code><br>使用</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">const Row &#x3D; (&#123; index, style &#125;) &#x3D;&gt; (  &lt;div style&#x3D;&#123;style&#125;&gt;Row &#123;index&#125;&lt;&#x2F;div&gt;); const Example &#x3D; () &#x3D;&gt; (  &lt;List    height&#x3D;&#123;150&#125;    itemCount&#x3D;&#123;1000&#125;    itemSize&#x3D;&#123;35&#125;    width&#x3D;&#123;300&#125;  &gt;    &#123;Row&#125;  &lt;&#x2F;List&gt;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h1><h2 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h2><blockquote><p>当渲染树中部分或者全部元素的<strong>尺寸、结构或者属性</strong>发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为回流。</p></blockquote><p>下面这些操作会导致回流：</p><ul><li>页面的首次渲染</li><li>浏览器的窗口大小发生变化</li><li>元素的内容发生变化</li><li>元素的尺寸或者位置发生变化</li><li>元素的字体大小发生变化</li><li>激活CSS伪类</li><li>查询某些属性或者调用某些方法</li><li>添加或者删除可见的DOM元素</li></ul><blockquote><p>在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：</p></blockquote><ul><li>全局范围： 从根节点开始，对整个渲染树进行重新布局</li><li>局部范围： 从渲染树的某部分或者一个渲染对象进行重新布局</li></ul><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>当页面中某些元素的<strong>样式发生变化</strong>，但是<strong>不会影响其在文档流中的位置</strong>时，浏览器就会对元素进行重新绘制，这个过程就是重绘。</p><p>下面这些操作会导致重绘：</p><ul><li>color、background 相关属性：background-color、background-image 等</li><li>outline 相关属性：outline-color、outline-width 、text-decoration</li><li>border-radius、visibility、box-shadow</li></ul><blockquote><p><strong>当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</strong></p></blockquote><h2 id="如何避免回流和重绘？"><a href="#如何避免回流和重绘？" class="headerlink" title="如何避免回流和重绘？"></a>如何避免回流和重绘？</h2><ul><li>操作DOM时，尽量在低层级的DOM节点进行操作</li><li>不要使用table布局， 一个小的改动可能会使整个table进行重新布局</li><li>使用CSS的表达式</li><li>不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</li><li>使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</li><li>避免频繁操作DOM，可以创建一个文档片段documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中</li><li>将元素先设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</li><li>将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于浏览器的渲染队列机制。</li></ul><p>浏览器针对页面的回流与重绘，进行了自身的优化——渲染队列</p><p>浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</p><p>上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSBridge</title>
      <link href="/2022/03/08/JSBridge/"/>
      <url>/2022/03/08/JSBridge/</url>
      
        <content type="html"><![CDATA[<p>JSBridge <strong>给JavaScript提供调用Native功能的接口</strong>， 让混合开发中的【前端部分】可以方便地使用地址位置、摄像头深知支付等 Native 功能。</p><p>JSBridge的用途不只是【调用Native功能】这么简单宽泛。实际上，JSBridge 就像其名称中的【Bridge】的意义一样，是Native 和非Native之间的桥梁，它的核心是 构建Native和非Native间消息通信的通道，而且是双向通信的通道。</p><blockquote><p>双向通信的通道：</p><ul><li>JS 向 Native 发送消息： 调用相关功能、通知Native当前JS的相关状态等</li><li>Native 向 JS 发送消息： 回溯调用结果，消息推送、通知JS当前Native的状态等。</li></ul></blockquote><h2 id="JSBridge的实现原理"><a href="#JSBridge的实现原理" class="headerlink" title="JSBridge的实现原理"></a>JSBridge的实现原理</h2><p>JavaScript是运行在一个单独的 JS context 中。由于这些context 与原生运行环境的天然隔离，我们可以将这种情况与 RPC 通信进行类比。将 Native 与 JavaScript 的每次互相调用看做一次 RPC 调用。<br>在 JSBridge 的设计中，可以把前端看做 RPC 的客户端，把 Native 端看做 RPC 的服务器端，从而 JSBridge 要实现的主要逻辑就出现了：<br><strong>通信调用（Native 与 JS 通信） 和 句柄解析调用。</strong></p><blockquote><p>（如果你是个前端，而且并不熟悉 RPC 的话，你也可以把这个流程类比成 JSONP 的流程）</p></blockquote><p>详情见<a href="https://juejin.cn/post/6844903585268891662">https://juejin.cn/post/6844903585268891662</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> JSBridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>styled component 使用规范</title>
      <link href="/2022/03/08/styled-component-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
      <url>/2022/03/08/styled-component-%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><h2 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h2><p>定义组件然后添加样式（通常再 export 出去）：以业务含义命名为基础，style 前加 <code>Raw</code> 后缀，style 后去除后缀。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">const</span> <span class="token function-variable function">HelpCenterRaw</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// define component</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> HelpCenter <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>HelpCenterRaw<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // add styles</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><p>import 后再次 style 一个组件，添加 Styled 后缀。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> HelpCenter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./HelpCenter'</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">&lt;</span>HelpCenterStyled <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> HelpCenterStyled <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>HelpCenter<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some styles</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Html-Tag-或通用基础组件"><a href="#Html-Tag-或通用基础组件" class="headerlink" title="Html Tag 或通用基础组件"></a>Html Tag 或通用基础组件</h2><p>有时我们 style 的不是自定义业务组件，而是 html tag 或通用基础组件，那就不存在重新命名的问题，以业务含义命名即可。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Header</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token operator">&lt;</span>Logo <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>UserMenu <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> Logo <span class="token operator">=</span> styled<span class="token punctuation">.</span>img<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some styles</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> UserMenu <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Menu<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  // some style</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h1><h2 id="将样式代码放至文件末尾"><a href="#将样式代码放至文件末尾" class="headerlink" title="将样式代码放至文件末尾"></a>将样式代码放至文件末尾</h2><p>基于业务逻辑比样式重要的原则，我们一般把样式代码放到文件的最后。上文代码即为示例。</p><p>覆盖 Ant Design 组件样式</p><p>当你尝试用 styled-components 去 wrap 一个 Ant Design 组件以覆盖原样式时，可能因为样式权重不够而失败。添加 !important 不是一个好的实践，可以按 styled-components 官方推荐的方法添加多个 &amp; 来提高权重：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> DividerStyled <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Divider<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  &amp;&amp;&amp; &#123;    margin: 0 12px 0 4px;  &#125;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-React-Native-中使用"><a href="#在-React-Native-中使用" class="headerlink" title="在 React Native 中使用"></a>在 React Native 中使用</h2><p>用法上没有不同，但 import 方式稍有不同：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components/native'</span> <span class="token comment">// instead of 'styled-components'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>styled-components 内部使用了 css-to-react-native 来将 CSS 文本转化为 React Native StyleSheet Object，详见：<a href="https://github.com/styled-components/css-to-react-native">https://github.com/styled-components/css-to-react-native</a></p><h2 id="用-props-动态计算样式"><a href="#用-props-动态计算样式" class="headerlink" title="用 props 动态计算样式"></a>用 props 动态计算样式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Good</span><span class="token operator">&lt;</span>Foo status<span class="token operator">=</span><span class="token punctuation">&#123;</span>Status<span class="token punctuation">.</span>Success<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token keyword">const</span> Foo <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> status<span class="token operator">?</span><span class="token operator">:</span> Status <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  font-weight: bold;  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> status <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> StatusEnum<span class="token punctuation">.</span>Success<span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Green      <span class="token keyword">case</span> StatusEnum<span class="token punctuation">.</span>Warning<span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Yellow      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> Color<span class="token punctuation">.</span>Gray    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;</span><span class="token template-punctuation string">`</span></span><span class="token comment">// Bad</span><span class="token keyword">const</span> Foo <span class="token operator">=</span> styled<span class="token punctuation">.</span>span<span class="token punctuation">.</span><span class="token function">attrs</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> status <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> status<span class="token operator">?</span><span class="token operator">:</span> Status <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  status<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  ...</span><span class="token template-punctuation string">`</span></span><span class="token comment">/** * .attrs() 的主要用途是给 styled 的目标元素/组件透传一些属性（attributes）， * 比如 styled.input.attrs(props => (&#123; type: 'password' &#125;))` ... `， * 这个会设置 input 的 type 属性为 password， * 详见：https://styled-components.com/docs/basics#attaching-additional-props */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="如何获得-styled-components-样式代码的语法高亮？"><a href="#如何获得-styled-components-样式代码的语法高亮？" class="headerlink" title="如何获得 styled-components 样式代码的语法高亮？"></a>如何获得 styled-components 样式代码的语法高亮？</h2><p>VSCode 可安装 jpoissonnier.vscode-styled-components 插件。<br>WebStorm 可安装 Styled Components &amp; Styled JSX 插件。</p><h2 id="在-React-Native-中使用-StyleSheet-时，stylelint-报-selector-type-no-unknown-错误"><a href="#在-React-Native-中使用-StyleSheet-时，stylelint-报-selector-type-no-unknown-错误" class="headerlink" title="在 React Native 中使用 StyleSheet 时，stylelint 报 selector-type-no-unknown 错误"></a>在 React Native 中使用 StyleSheet 时，stylelint 报 selector-type-no-unknown 错误</h2><p>请统一使用 styled-components 来定义样式。</p><h2 id="在-React-Native-中使用-styled-components-时，stylelint-报-property-no-unknown-错误"><a href="#在-React-Native-中使用-styled-components-时，stylelint-报-property-no-unknown-错误" class="headerlink" title="在 React Native 中使用 styled-components 时，stylelint 报 property-no-unknown 错误"></a>在 React Native 中使用 styled-components 时，stylelint 报 property-no-unknown 错误</h2><p>将该 React Native 特有的样式属性添加到 stylelint.config.js 的 rules.property-no-unknown.ignoreProperties 中。</p><h2 id="在-stylelint-报错的-line-number-的对应行上找不到错误"><a href="#在-stylelint-报错的-line-number-的对应行上找不到错误" class="headerlink" title="在 stylelint 报错的 line number 的对应行上找不到错误"></a>在 stylelint 报错的 line number 的对应行上找不到错误</h2><p>stylelint 报错的 line number 是一个样式 block 的第一行，错误需要在整个 block 内寻找。</p><p>Warning: Received “true” for a non-boolean attribute<br>是因为传递的 true&#x2F;false 不是符合标准的 DOM attribute，以下链接有更详细的说明<br><a href="https://styled-components.com/docs/faqs#why-am-i-getting-html-attribute-warnings">https://styled-components.com/docs/faqs#why-am-i-getting-html-attribute-warnings</a><br><a href="https://github.com/styled-components/styled-components/issues/1198">https://github.com/styled-components/styled-components/issues/1198</a></p><p><code>0</code> is not a valid style property</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> HeaderColumn <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">&#123;</span> width<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  padding: 14px 0;  align-items: center;// 错误写法，width 的值会被 StyleSheet 当作 style key  </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span>    props<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span>    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px;    </span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  // 正确写法，改用三元</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token parameter">props</span> <span class="token operator">=></span>    props<span class="token punctuation">.</span>width <span class="token operator">?</span>    css<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">px;    </span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"></span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> style </category>
          
      </categories>
      
      
        <tags>
            
            <tag> style </tag>
            
            <tag> style component </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react native 最佳实践</title>
      <link href="/2022/03/08/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/03/08/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="样式相关"><a href="#样式相关" class="headerlink" title="样式相关"></a>样式相关</h1><h2 id="浮动按钮"><a href="#浮动按钮" class="headerlink" title="浮动按钮"></a>浮动按钮</h2><p>当你想要创建一个浮动按钮时，却发现无论如何设置 position 和 z-index ，按钮始终显示在视图下方。此时，你请留意自己的按钮是否将定位属性和 Touchable 组件写到了一起：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">FloatButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapper onPress<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这个情况下，甚至无法点击按钮  </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TouchableOpacity<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  position: absolute;  z-index: 100;  bottom: 20px;  right: 20px;  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是这样，你需要将布局样式属性和 Touchable 组件做一个分离，才能得到正确的浮动效果：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">FloatButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapper<span class="token operator">></span>    <span class="token operator">&lt;</span>Button onPress<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 正常点击</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Wrapper<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>View<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  position: absolute;  z-index: 100;  bottom: 20px;  right: 20px;  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>TouchableOpacity<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  width: 40px;  height: 40px;</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsonp</title>
      <link href="/2022/03/06/jsonp/"/>
      <url>/2022/03/06/jsonp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> jsonp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react fiber</title>
      <link href="/2022/03/06/react-fiber/"/>
      <url>/2022/03/06/react-fiber/</url>
      
        <content type="html"><![CDATA[<h1 id="react-15-渲染方式"><a href="#react-15-渲染方式" class="headerlink" title="react 15 渲染方式"></a>react 15 渲染方式</h1><blockquote><p>缺点： 如果界面节点多，层次深，递归渲染比较耗时，JS是单线程的，而且UI线程和JS线程是互斥的，页面会出现卡顿的现象。</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'0'</span> className<span class="token operator">=</span><span class="token string">'red'</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'1'</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'2'</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> rootParent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(JSON.stringify(element, null, 2)) </span>  <span class="token keyword">let</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>type<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">===</span><span class="token string">'children'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">childrenProp</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>          <span class="token function">render</span><span class="token punctuation">(</span>childrenProp<span class="token punctuation">,</span>dom<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        dom<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      dom<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>props<span class="token punctuation">[</span>v<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  rootParent<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="什么是fiber"><a href="#什么是fiber" class="headerlink" title="什么是fiber"></a>什么是fiber</h1><ol><li>fiber 是一种 ** 数据结构**，它可以使用一个纯JS对象来表示</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> fiber<span class="token operator">=</span><span class="token punctuation">&#123;</span>    stateNode<span class="token punctuation">,</span> <span class="token comment">//节点实例</span>    child<span class="token punctuation">,</span>     <span class="token comment">//子节点</span>    sibling<span class="token punctuation">,</span>   <span class="token comment">//兄弟节点</span>    <span class="token keyword">return</span><span class="token punctuation">,</span>    <span class="token comment">//父节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>fiber 是一个执行单元，每次执行完一个执行单元，react就会检查现在还剩多少时间，如果没有时间就将控制权让出去。</p></li><li><p>fiber关键特性</p></li></ol><ul><li>增量渲染 （将渲染任务进行拆分，均匀到每一帧去执行）</li><li>可暂停、终止，复用渲染任务</li><li>不同更新的优先级</li><li>并发方面新的基础能力</li></ul><h1 id="fiber-运行流程"><a href="#fiber-运行流程" class="headerlink" title="fiber 运行流程"></a>fiber 运行流程</h1><h2 id="帧的概念"><a href="#帧的概念" class="headerlink" title="帧的概念"></a>帧的概念</h2><h2 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame"></a>window.requestAnimationFrame</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame()</a> 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行</p><blockquote><p>注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'some-element-you-want-to-animate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> start<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>  <span class="token keyword">const</span> elapsed <span class="token operator">=</span> timestamp <span class="token operator">-</span> start<span class="token punctuation">;</span>  <span class="token comment">//这里使用`Math.min()`确保元素刚好停在200px的位置。</span>  element<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">'translateX('</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">*</span> elapsed<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px)'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 在两秒后停止动画</span>    window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback"></a>requestIdleCallback</h2><blockquote><p>这是一个实验中的功能,不是所有的浏览器豆兼容。 react中是模拟了一个类似<code>requestIdleCallback</code>的功能</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback">window.requestIdleCallback()</a> 方法插入一个函数，这个函数将在浏览器<strong>空闲</strong>时期被调用。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。</p><p>你可以在空闲回调函数中调用<code>requestIdleCallback()</code>，以便在下一次通过事件循环之前调度另一个回调。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> handle <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个ID，可以把它传入 <code>Window.cancelIdleCallback()</code> 方法来结束回调。</p><h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><p>Channel Messaging API的<code>MessageChannel</code> 接口允许我们创建一个新的<strong>消息通道</strong>，并通过它的两个<code>MessagePort</code> 属性发送数据.</p><blockquote><p>此特性在 Web Worker 中可用</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在以下代码块中，您可以看到使用<code>MessageChannel</code>构造函数实例化了一个<code>channel</code>对象。当<code>iframe</code>加载完毕，我们使用<code>MessagePort.postMessage</code>方法把一条消息和<code>MessageChannel.port2</code>传递给<code>iframe</code>。<code>handleMessage</code>处理程序将会从<code>iframe</code>中（使用<code>MessagePort.onmessage</code>监听事件）接收到信息，将数据其放入<code>innerHTML</code>中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> para <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ifr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> otherWindow <span class="token operator">=</span> ifr<span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>ifr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> iframeLoaded<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">iframeLoaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  otherWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'Hello from the main page!'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>channel<span class="token punctuation">.</span>port2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> handleMessage<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  para<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>目前<code> requestIdleCallback</code>只有chrome支持</li><li>所以React 利用 MessageChannel模拟了RequestIdleCallback，将毁掉延迟到绘制操作之后执行。</li><li>MessageChannel API 允许我们创建一个新的消息通道，并通过他的两个MessagePort属性发送数据。</li><li>MessageChannel 创建了一个通信的管道，这个管道又两个端口，每个端口都可以用过postMessage发送数据，而应该端口只要绑定了onMessage回调方法，就可以接受另外一个端口传过来的数据。</li><li>MessageChannel是一个宏任务。</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> channel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> port1<span class="token operator">=</span>channel<span class="token punctuation">.</span>port1<span class="token keyword">let</span> port2<span class="token operator">=</span>channel<span class="token punctuation">.</span>port2port1<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'port1 receive data:'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>port2<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'port2 receive data:'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>port1<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"port1数据"</span><span class="token punctuation">)</span>port2<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"port2数据"</span><span class="token punctuation">)</span><span class="token comment">//打印结果</span><span class="token comment">/* port2 receive data: port1数据port1 receive data: port2数据 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fiber-执行阶段"><a href="#fiber-执行阶段" class="headerlink" title="fiber 执行阶段"></a>fiber 执行阶段</h2><p> 每次渲染有两个阶段： <code>Reconciliation</code>(协调render阶段)和<code>Commit</code>（提交阶段）</p><ul><li>协调的阶段： 可以认为是<code>Diff</code>阶段，这个阶段可以被终止，这个阶段会找出所有的节点变更，例如节点新增、删除、属性变更等等，这些变更称为副作用。</li><li>提交阶段： 将上一阶段计算出来的需要处理的副作用（effects）一次性执行了。这个阶段必须同步执行，不能被打断。</li></ul><h3 id="遍历规则"><a href="#遍历规则" class="headerlink" title="遍历规则"></a>遍历规则</h3><p>按照深度优先：</p><ol><li>下一个节点：先儿子，后弟弟，再叔叔</li><li>自己的所有子节点完成后自己完成</li></ol><h1 id="深度剖析fiber单元处理过程以及EffectList的构建过程"><a href="#深度剖析fiber单元处理过程以及EffectList的构建过程" class="headerlink" title="深度剖析fiber单元处理过程以及EffectList的构建过程"></a>深度剖析fiber单元处理过程以及EffectList的构建过程</h1><p>React 框架内部的运作可以分为3层：</p><ul><li>virtual DOM 层，描述页面长什么样</li><li>Reconciler 层，负责调用组件生命周期方法，进行Diff算法等。</li><li>Renderer 层，根据不同的平台，渲染出相应的页面.</li></ul><p>为了加以区分，以前的 Reconciler 被命名为<code>Stack Reconciler</code>。Stack Reconciler 运作的过程是不能被打断的，必须一条道走到黑,而 <code>Fiber Reconciler</code> 每执行一段时间，都会将控制权交回给浏览器，可以<code>分段执行</code>。<br>为了达到这种效果，就需要有一个调度器 (<code>Scheduler</code>) 来进行任务分配。任务的优先级有六种:</p><ul><li><code>synchronous</code>，与之前的Stack Reconciler操作一样，同步执行</li><li><code>task</code>，在next tick之前执行</li><li><code>animation</code>，下一帧之前执行</li><li><code>high</code>，在不久的将来立即执行</li><li><code>low</code>，稍微延迟执行也没关系</li><li><code>offscreen</code>，下一次render时或scroll时才执行</li></ul><p>Fiber Reconciler 在执行过程中，会分为 2 个阶段。<br><img src="https://segmentfault.com/img/bVboJH6?w=1076&h=697" alt="阶段图"></p><ol><li>阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。</li><li>阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li></ol><h2 id="fiber树"><a href="#fiber树" class="headerlink" title="fiber树"></a>fiber树</h2><p>Fiber Reconciler 在阶段一进行 Diff 计算的时候，会生成一棵 Fiber 树。这棵树是在 Virtual DOM 树的基础上增加额外的信息来生成的，它本质来说是一个链表。<br>![])(<a href="https://segmentfault.com/img/bVboJHa?w=970&amp;h=732">https://segmentfault.com/img/bVboJHa?w=970&amp;h=732</a>)<br>![])(<a href="https://segmentfault.com/img/bVboJHa?w=970&amp;h=732">https://segmentfault.com/img/bVboJHa?w=970&amp;h=732</a>)</p><p>Fiber 树在首次渲染的时候会一次过生成。在后续需要 Diff 的时候，会根据已有树和最新 Virtual DOM 的信息，生成一棵新的树。这颗新树每生成一个新的节点，都会将控制权交回给主线程，去检查有没有优先级更高的任务需要执行。如果没有，则继续构建树的过程：<br><img src="https://segmentfault.com/img/bVboJNB?w=872&h=785"></p><p>如果过程中有优先级更高的任务需要进行，则 <code>Fiber Reconciler</code> 会丢弃正在生成的树，在空闲的时候再重新执行一遍。</p><p>在构造 Fiber 树的过程中，Fiber Reconciler 会将需要更新的节点信息保存在<code>Effect List</code>当中，在阶段二执行的时候，会批量更新相应的节点。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 下一个工作单元</span><span class="token comment">// fiber 其实也是一个普通的JS对象</span><span class="token keyword">let</span> workInProgressRoot <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">stateNode</span><span class="token operator">:</span> root<span class="token punctuation">,</span> <span class="token comment">// 此fiber对应的DOM节点</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>element<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> nextUnitOfWork <span class="token operator">=</span> workInProgressRoot<span class="token punctuation">;</span><span class="token keyword">const</span>  <span class="token constant">PLACEMENT</span> <span class="token operator">=</span> <span class="token string">"PLACEMENT"</span><span class="token comment">// 定义一个工作循环</span><span class="token keyword">function</span> <span class="token function">workloop</span><span class="token punctuation">(</span><span class="token parameter">deadline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始工作循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>nextUnitOfWork<span class="token operator">&amp;&amp;</span>deadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         nextUnitOfWork <span class="token operator">=</span>  <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>nextUnitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>nextUnitOfWork<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">commitRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">commitRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> currentFiber <span class="token operator">=</span> workInProgressRoot<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"commitRoot:"</span><span class="token punctuation">,</span> currentFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>effectTag <span class="token operator">===</span> <span class="token string">"PLACEMENT"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             currentFiber<span class="token punctuation">.</span>return<span class="token punctuation">.</span>stateNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        currentFiber <span class="token operator">=</span> currentFiber<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    workInProgressRoot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * beginWork 1. 创建此Fiber的真实DOM * 通过虚拟DOM创建Fiber树结构 * @param &#123;*&#125; workingInProgressFiber  */</span><span class="token keyword">function</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">beginWork</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> workingInProgressFiber<span class="token punctuation">.</span>child<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 如果没有儿子当前节点其实就结束了</span>        <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> workingInProgressFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        workingInProgressFiber <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">completeUnitOfWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"completeUnitOfWork"</span><span class="token punctuation">,</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构建副作用链，上面只有副作用的节点</span>    <span class="token keyword">let</span> returnFiber <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>return<span class="token punctuation">;</span><span class="token comment">// A1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">// 把当前fiber有副作用的子链表挂载到父身上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>returnFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>firstEffect<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>effectTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                returnFiber<span class="token punctuation">.</span>lastEffect<span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                 returnFiber<span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            returnFiber<span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">beginWork</span><span class="token punctuation">(</span><span class="token parameter">workingInProgressFiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beginWork"</span><span class="token punctuation">,</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>workingInProgressFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       workingInProgressFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span>   document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">"children"</span><span class="token punctuation">)</span>            workingInProgressFiber<span class="token punctuation">.</span>stateNode<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 在beginwork 里面是不挂载的</span>    <span class="token comment">// 创建子Fiber</span>    <span class="token keyword">let</span> previousFiber<span class="token punctuation">;</span>    Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>workingInProgressFiber<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">child<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>         <span class="token keyword">let</span> childFiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> child<span class="token punctuation">.</span>type<span class="token punctuation">,</span><span class="token comment">// DOM节点类型</span>            <span class="token literal-property property">props</span><span class="token operator">:</span> child<span class="token punctuation">.</span>props<span class="token punctuation">,</span>            <span class="token keyword">return</span><span class="token operator">:</span> workingInProgressFiber<span class="token punctuation">,</span>            <span class="token literal-property property">effectTag</span><span class="token operator">:</span><span class="token constant">PLACEMENT</span><span class="token punctuation">,</span><span class="token comment">// 这个fiber必须要插入到父节点中</span>            <span class="token literal-property property">nextEffect</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token comment">// 下一个副作用节点</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            workingInProgressFiber<span class="token punctuation">.</span>child <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             previousFiber<span class="token punctuation">.</span>sibling <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        previousFiber <span class="token operator">=</span> childFiber<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 空闲时间</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>workloop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reconcile调和"><a href="#reconcile调和" class="headerlink" title="reconcile调和"></a>reconcile调和</h2><blockquote><p>替换、更新、删除节点，可在fiber上打上tag，例如<code>fiber.effectTag=&#39;REPLACEMENT|DELETION|UPDATE&#39;</code></p></blockquote><ul><li>新老节点类型一样，复用老节点dom,更新props即可</li><li>如果类型不一样，而且新的节点存在，创建新的节点替换老节点</li><li>如果类型不一样，没有新节点，有老节点，删除老节点</li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> fiber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/03/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP/HTML/浏览器</title>
      <link href="/2022/02/20/HTTP-HTML-%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2022/02/20/HTTP-HTML-%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h1><p>&gt; <strong>https的SSL加密是在传输层实现的。</strong></p><ol><li>基本概念</li></ol><p><strong>http</strong>: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p><strong>https</strong>: 是以<strong>安全</strong>为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><ol start="2"><li><p>区别</p><blockquote><p>简单来说，https是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。</p></blockquote></li></ol><table><thead><tr><th>http</th><th>https</th></tr></thead><tbody><tr><td>无需费用</td><td>需要ca证书，费用较高</td></tr><tr><td>超文本传输协议,明文传输</td><td>安全性的ssl加密传输协议</td></tr><tr><td>端口80</td><td>端口443</td></tr><tr><td>连接无状态</td><td>由ssl+http协议构建的可进行加密传输、身份认证的网络协议</td></tr><tr><td>缓存快，握手快</td><td>缓存慢，握手阶段费时，增加数据、耗电</td></tr></tbody></table><h1 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h1><p><strong>客户端和服务端都需要直到各自可收发，一次需要三次握手</strong></p><p><img src="https://user-images.githubusercontent.com/17233651/42496289-1c6d668a-8458-11e8-98b3-65db50f64d48.png" alt="tcp三次握手"></p><p>从图片可以得到三次握手可以简化为：C发起请求连接S确认，也发起连接C确认我们再看看每次握手的作用：</p><ol><li><p>第一次握手：S只可以确认 自己可以接受C发送的报文段</p></li><li><p>第二次握手：C可以确认 S收到了自己发送的报文段，并且可以确认 自己可以接受S发送的报文段</p></li><li><p>第三次握手：S可以确认 C收到了自己发送的报文段</p></li></ol><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><table><thead><tr><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>面向连接</td><td>无连接（发送数据前不需要先建立连接）</td></tr><tr><td>可靠服务，数据无差错，不丢失，不重复，按序到达</td><td>不可靠，尽最大努力交付</td></tr><tr><td>字节流</td><td>报文</td></tr><tr><td>1对1</td><td>1对1 ，1对多</td></tr><tr><td>首部较大为20字节</td><td>首部最大有8字节</td></tr></tbody></table><h1 id="click在ios上有300ms延迟，原因及如何解决？"><a href="#click在ios上有300ms延迟，原因及如何解决？" class="headerlink" title="click在ios上有300ms延迟，原因及如何解决？"></a>click在ios上有300ms延迟，原因及如何解决？</h1><ol><li>粗暴型，禁用缩放</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, user-scalable=no"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>利用FastClick，其原理是：</li></ol><p>检测到<code>touchend</code> 事件后，立刻出发模拟<code>click</code> 事件，并且把浏览器300毫秒之后真正出发的事件给阻断掉</p><h1 id="HTTP-状态码及其含义"><a href="#HTTP-状态码及其含义" class="headerlink" title="HTTP 状态码及其含义"></a>HTTP 状态码及其含义</h1><ul><li><p><code>1XX</code>：信息状态码</p><ul><li><code>100 Continue</code> 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</li></ul></li><li><p><code>2XX</code>：成功状态码</p><ul><li><code>200 OK</code> 正常返回信息</li><li><code>201 Created</code> 请求成功并且服务器创建了新的资源</li><li><code>202 Accepted</code> 服务器已接受请求，但尚未处理</li></ul></li><li><p><code>3XX</code>：重定向</p><ul><li><code>301 Moved Permanently</code> 请求的网页已永久移动到新位置。</li><li><code>302 Found</code> 临时性重定向。</li><li><code>303 See Other</code> 临时性重定向，且总是使用 GET 请求新的 URI。</li><li><code>304 Not Modified</code> 自从上次请求后，请求的网页未修改过。</li></ul></li><li><p><code>4XX</code>：客户端错误</p><ul><li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li><li><code>401 Unauthorized</code> 请求未授权。</li><li><code>403 Forbidden</code> 禁止访问。</li><li><code>404 Not Found</code> 找不到如何与 URI 相匹配的资源。</li></ul></li><li><p><code>5XX</code>: 服务器错误</p><ul><li><code>500 Internal Server Error</code> 最常见的服务器端错误。</li><li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li></ul></li></ul><h1 id="用户从浏览器输入地址到看到页面发生了什么"><a href="#用户从浏览器输入地址到看到页面发生了什么" class="headerlink" title="用户从浏览器输入地址到看到页面发生了什么"></a>用户从浏览器输入地址到看到页面发生了什么</h1><ul><li>检查缓存<br>○ DNS 缓存<br>○ 页面缓存</li><li>网络请求<br>○ DNS域名解析<br>○ 建立TCP连接(三次握手机制、四次握手机制(HTTPS安全协议下))<br>○ 发送HTTP请求<br>○ 接收响应</li><li>解析页面<br>○ 构建DOM树<br>○ 样式计算<br>○ 生成布局树</li><li>渲染过程<br>○ 建立图层树<br>○ 生成绘制列表<br>○ 生成图块、位图<br>○ 显示内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTTP/HTML/浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTML </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eventbus</title>
      <link href="/2022/02/20/eventbus/"/>
      <url>/2022/02/20/eventbus/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eventbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/02/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/02/20/%E9%97%AD%E5%8C%85/"/>
      <url>/2022/02/20/%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hook</title>
      <link href="/2022/02/20/React-Hook/"/>
      <url>/2022/02/20/React-Hook/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p><a href="https://zh-hans.reactjs.org/docs/hooks-intro.html">官方文档</a>，可以用一些方式来<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010">快速校验</a>学习成果。</p><p>基础 Hooks 库：<a href="https://ahooks.js.org/zh-CN/">ahooks</a>，来补充一些基础 JS 能力的 Hooks 实现，有兴趣的话，可以看一下其源码。</p><p>最佳实践</p><p>在使用 React hooks 需遵循一些最佳实践：</p><p>react-hooks&#x2F;exhaustive-deps</p><p>这是 React hooks 的 ESLint 规则中最核心的一条，要求开发者穷尽 hook 的依赖，以减少因为遗漏了数据依赖关系而导致的 bug（这种 bug 通常 debug 成本很高）。</p><p>开发者如果选择在某处禁用该规则，应注释具体原因，否则该处代码将难以维护。</p><p>请扩展阅读以下官方 QA：</p><ol><li><a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies">在依赖列表中省略函数是否安全？</a></li><li>[如果我的 effect 的依赖频繁变化，我该怎么办？]</li></ol><p>useMemo</p><p>useMemo（及 useCallback）很容易被滥用，通常因为开发者会犯过早优化的错误。性能优化总是会有成本，但并不总是带来好处。不必要的 useMemo 的使用会导致以下问题：</p><ol><li>useMemo 本身会增加代码执行成本。</li><li>useMemo 有连锁效应，如果你的一个 useMemo 依赖了另一个数组&#x2F; Object &#x2F;函数…，你可能会被迫对该依赖也使用 useMemo&#x2F;useCallback。最后你会使用一连串的 useMemo。</li><li>useMemo 一旦被使用之后，就很难被清理。开发者很难评估它当时是为了解决什么问题，深入分析的成本也很高，因此最终就不会有人选择动它。</li></ol><p>所以我们推荐的策略是，默认不使用 useMemo&#x2F;useCallback，直到你确实遇到以下问题时才考虑使用：</p><ol><li>有依赖在重复触发不必要的副作用（比如重复发送请求）。</li><li>页面有明显的性能问题（可能由过多的重渲染或者量级巨大的循环计算造成）。<br>  ○ 这也是开发者过早优化时潜意识中所担心的问题，但现代计算机的性能对于网页来说是过剩的，React 底层也对重渲染做了大量优化，因此绝大部分情况下开发者不需要提前优化，应等到问题真的出现再做解决。</li><li>重渲染导致了一些特殊组件的 UI 异常（比如图表每次重渲染都播放初始化动画）。</li></ol><blockquote><p>在调查组件渲染和性能问题时，可以使用 <a href="https://zh-hans.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html">React Profiler</a>。</p></blockquote><p>另一种误用 useMemo 的场景是用空依赖的 useMemo 来保证一个非 primitive 类型常量的引用不变。这是一个错误的使用，因为常量无关输入，不需要被“记住”。应该直接定义在组件外：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Bad</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Bar prop<span class="token operator">=</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token comment">// Good</span><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Bar prop<span class="token operator">=</span><span class="token punctuation">&#123;</span>list<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/02/20/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/20/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><a href="https://github.com/wmshero/leetcode-javascript/issues/3">合并两个有序链表（简单） 21</a></p><h2 id="递归与回溯"><a href="#递归与回溯" class="headerlink" title="递归与回溯"></a>递归与回溯</h2><p><a href="https://github.com/wmshero/leetcode-javascript/issues/1">跳水板-面试题 16.11</a><br><a href="https://github.com/wmshero/leetcode-javascript/issues/2">顺次数-1291</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写async await</title>
      <link href="/2022/02/20/%E6%89%8B%E5%86%99async-await/"/>
      <url>/2022/02/20/%E6%89%8B%E5%86%99async-await/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有人说<code>async </code>函数是<code>generator </code>函数的语法糖，接下来使用generator函数实现async。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上代码使用generator函数表示如下：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>但是generator函数不会自动执行，每次调用它的next方法，会停留在下一个yield的位置。所以，我们需要编写一个自动执行函数</p></blockquote><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span>    <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'success'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>asyncToGenerator接受一个generator函数，返回一个promise</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// await被编译成了yield</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data2: '</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'success'</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> dataPromise <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dataPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// data1的value被拿到了 继续调用next并且传递给data</span>    <span class="token keyword">var</span> data2Promise <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>value1<span class="token punctuation">)</span>        <span class="token comment">// console.log('data: ', data);</span>    <span class="token comment">// 此时就会打印出data</span>        data2Promise<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// data2的value拿到了 继续调用next并且传递value2</span>         gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span>                 <span class="token comment">// console.log('data2: ', data2);</span>        <span class="token comment">// 此时就会打印出data2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">generatorFunc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generatorFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> generatorResult                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    generatorResult <span class="token operator">=</span> gen<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> generatorResult                <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">'next'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">'throw'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * async的执行原理 * 其实就是自动执行generator函数 * 暂时不考虑genertor的编译步骤（更复杂） */</span><span class="token keyword">const</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 这样的一个async函数 应该再1秒后打印data</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">return</span> data<span class="token punctuation">&#125;</span><span class="token comment">// async函数会被编译成generator函数 (babel会编译成更本质的形态，这里我们直接用generator)</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">testG</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// await被编译成了yield</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data2: '</span><span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data <span class="token operator">+</span> <span class="token string">'123'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span><span class="token parameter">generatorFunc</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">generatorFunc</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> generatorResult        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          generatorResult <span class="token operator">=</span> gen<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> value<span class="token punctuation">,</span> done <span class="token punctuation">&#125;</span> <span class="token operator">=</span> generatorResult        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token function">onResolve</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token function">onReject</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"throw"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">step</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> testGAsync <span class="token operator">=</span> <span class="token function">asyncToGenerator</span><span class="token punctuation">(</span>testG<span class="token punctuation">)</span><span class="token function">testGAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2022/02/20/javascript/"/>
      <url>/2022/02/20/javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p> 闭包是能够读取其他函数内部的函数，或者子函数在外调用，子函数所在的父函数的作用域不会被释放。</p><h1 id="类的创建和继承"><a href="#类的创建和继承" class="headerlink" title="类的创建和继承"></a>类的创建和继承</h1><h1 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h1><p>HTML中与<code>javascript</code>交互是通过<strong>事件驱动</strong>来实现的，例如鼠标点击事件<code>onclick</code>、页面的滚动事件<code>onscroll</code>等等，可以向文档或者文档中的元素 添加 事件侦听器 来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下 <strong>“事件流”</strong> 的概念。</p><blockquote><p>事件流描述的是从页面中接收事件的顺序，DOM2级事件流包括下面几个阶段</p></blockquote><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p>addEventListener: addEventListener 是DOM2 级事件新增的指定事件处理程序的操作，这个方法接收3个参数：</p><ol><li>要处理的事件名</li><li>作为事件处理程序的函数</li><li>一个布尔值。<br>最后这个布尔值参数如果是true，表示在<strong>捕获阶段调用事件处理程序</strong>；如果是false，表示在<strong>冒泡阶段调用事件处理程序</strong>。</li></ol><blockquote><p>IE只支持事件冒泡</p></blockquote><h1 id="js的各种位置"><a href="#js的各种位置" class="headerlink" title="js的各种位置"></a>js的各种位置</h1><blockquote><p>比如clientHeight,scrollHeight,offsetHeight ,以及scrollTop, offsetTop,clientTop的区别？</p></blockquote><ul><li><code>clientHeight</code>：可视区域的高度，不包含border和滚动条</li><li><code>offsetHeight</code>：可视区域的高度，包含了border和滚动条</li><li><code>scrollHeight</code>：所有区域的高度，包含了因为滚动被隐藏的部分。</li><li><code>clientTop</code>：边框border的厚度，在未指定的情况下一般为0</li><li><code>scrollTop</code>：滚动后被隐藏的高度，获取对象相对于由offsetParent属性指定的父坐标(css定位的元素或body元素)距离顶端的高度。</li></ul><h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>必要性： 由于字符串、对象和数组没有固定大小，所有当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。</p><p>这段话解释了为什么需要系统需要垃圾回收，JS不像C&#x2F;C++，他有自己的一套垃圾回收机制。JavaScript的解释器可以检测到何时程序不再使用一个对象了，当他确定了一个对象是无用的时候，他就知道不再需要这个对象，可以把它所占用的内存释放掉了。例如：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> b<span class="token operator">=</span><span class="token string">"world"</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token operator">=</span>b<span class="token punctuation">;</span> <span class="token comment">//这时，会释放掉"hello world"，释放内存以便再引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>垃圾回收的方法：标记清除、计数引用。</p></blockquote><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>这是最常见的垃圾回收方式，当变量进入环境时，就标记这个变量为”进入环境“,从逻辑上讲，永远不能释放进入环境变量所占用的内存，只要执行流程进入相应的环境，就可能用到他们。当离开环境时，就标记为离开环境。</p><p>垃圾回收器在运行的时候会给存储在内存中的变量都加上标记（所有都加），然后去掉环境变量中的变量，以及被环境变量中的变量所引用的变量（条件性去除标记），删除所有被标记的变量，删除的变量无法在环境变量中被访问所以会被删除，最后垃圾回收器，完成了内存的清除工作，并回收他们所占用的内存。</p><h2 id="计数引用"><a href="#计数引用" class="headerlink" title="计数引用"></a>计数引用</h2><p>另一种不太常见的方法就是引用计数法，引用计数法的意思就是每个值没引用的次数，当声明了一个变量，并用一个引用类型的值赋值给改变量，则这个值的引用次数为1,；相反的，如果包含了对这个值引用的变量又取得了另外一个值，则原先的引用值引用次数就减1，当这个值的引用次数为0的时候，说明没有办法再访问这个值了，因此就把所占的内存给回收进来，这样垃圾收集器再次运行的时候，就会释放引用次数为0的这些值。</p><p>用引用计数法会存在内存泄露，下面来看原因：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">problem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>objA<span class="token punctuation">.</span>someOtherObject <span class="token operator">=</span> objB<span class="token punctuation">;</span>objB<span class="token punctuation">.</span>anotherObject <span class="token operator">=</span> objA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这个例子里面，objA和objB通过各自的属性相互引用，这样的话，两个对象的引用次数都为2，在采用引用计数的策略中，由于函数执行之后，这两个对象都离开了作用域，函数执行完成之后，因为计数不为0，这样的相互引用如果大量存在就会导致内存泄露。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest测试</title>
      <link href="/2022/01/20/jest%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/01/20/jest%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单元测试和集成测试"><a href="#单元测试和集成测试" class="headerlink" title="单元测试和集成测试"></a>单元测试和集成测试</h1><ul><li>单元测试： 对软件的最小可测试单元进行检查和验证。前端所说的单元测试就是对一个模块进行测试，也就是说前端测试的时候，你测试的东西一定是一个模块。</li><li>集成测试：也叫组装测试或者联合测试。在单元测试的基础上，将所有模块按照涉及要求组装成子系统或系统，进行集成测试。</li></ul><h1 id="常用匹配符"><a href="#常用匹配符" class="headerlink" title="常用匹配符"></a>常用匹配符</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> dabaojian <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index.js'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> test1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dabaojian<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'付款 300元'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'贵了'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'测试严格相等'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'测试严格相等'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token string">'007'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeNull测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeUndefined测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 只要定义过了，都可以匹配成功</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeDefined测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'你好'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//判断是否为真，null 和 undefined ,false,0无法通过，其他都是可以通过测试</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeTruthy测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">1</span>    <span class="token comment">// const a=0</span>    <span class="token comment">// const a=true</span>    <span class="token comment">// const a=&#123;&#125; </span>    <span class="token comment">// const a=[]</span>    <span class="token comment">// const a='hi'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeFalsy测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment">// const a=false</span>    <span class="token comment">// const a=null </span>    <span class="token comment">// const a=undefined </span>    <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 大于</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThan'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 小于</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeLessThan'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">10</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 大于或等于 （小于等于 toBeLessThanOrEqual）</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThanOrEqual'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count<span class="token operator">=</span><span class="token number">11</span>    <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 消除js浮点精度错误的匹配器</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeCloseTo'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> num1<span class="token operator">=</span><span class="token number">0.1</span>    <span class="token keyword">const</span> num2<span class="token operator">=</span><span class="token number">0.2</span>    <span class="token function">expect</span><span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 字符串匹配</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toMatch'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> str<span class="token operator">=</span><span class="token string">'苹果，荔枝，栗子'</span>    <span class="token function">expect</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">)</span>    <span class="token comment">// expect(str).toMatch(/荔枝/)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 数组匹配</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toContain'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token string">'荔枝'</span><span class="token punctuation">,</span><span class="token string">'栗子'</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 异常处理</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toThrow'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">throwNewErrorFunc</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 相反/取反</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'not toThrow'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token function-variable function">throwNewErrorFunc</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>throwNewErrorFunc<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">'this is a new error'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData1测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//断言，必须需要执行一次expect方法才可以通过测试</span>    <span class="token keyword">return</span> fetchData1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 断言，必须执行一次expect</span>    <span class="token keyword">return</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// async...await 测试</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span><span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 或者</span>    <span class="token keyword">const</span> res<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">success</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="jest中的四个钩子函数"><a href="#jest中的四个钩子函数" class="headerlink" title="jest中的四个钩子函数"></a>jest中的四个钩子函数</h1><h2 id="beforeAll"><a href="#beforeAll" class="headerlink" title="beforeAll"></a>beforeAll</h2><p>在所有测试用例之前进行执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeAll 在所有测试用例之前进行执行'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="afterAll"><a href="#afterAll" class="headerlink" title="afterAll"></a>afterAll</h2><p>在所有测试用例之后进行执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterAll 在所有测试用例之后进行执行'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="beforeEach"><a href="#beforeEach" class="headerlink" title="beforeEach"></a>beforeEach</h2><p>在每个测试用例前都会执行一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach 在每个测试用例前都会执行一次'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="afterEach"><a href="#afterEach" class="headerlink" title="afterEach"></a>afterEach</h2><p>在每个测试用例后都会执行一次</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach 在每个测试用例前都会执行一次'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="测试用例分组"><a href="#测试用例分组" class="headerlink" title="测试用例分组"></a>测试用例分组</h1><p><code>describe()</code>分组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'数字相关'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 大于</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 小于</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeLessThan'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">10</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 大于或等于 （小于等于 toBeLessThanOrEqual）</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeGreaterThanOrEqual'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token number">11</span>        <span class="token function">expect</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 消除js浮点精度错误的匹配器</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'toBeCloseTo'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">0.1</span>        <span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">0.2</span>        <span class="token function">expect</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'异步相关'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'fetchData1测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//断言，必须需要执行一次expect方法才可以通过测试</span>        <span class="token keyword">return</span> fetchData1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 断言，必须执行一次expect</span>        <span class="token keyword">return</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'404'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// async...await 测试</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'catch 测试'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">await</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>resolves<span class="token punctuation">.</span><span class="token function">toMatchObject</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 或者</span>        <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="钩子函数的作用域"><a href="#钩子函数的作用域" class="headerlink" title="钩子函数的作用域"></a>钩子函数的作用域</h1><p>jest中钩子函数的作用域有下面三个特色：</p><ul><li>钩子函数在父级分组可作用域子集，类似继承</li><li>钩子函数同级分组作用域互不干扰，各起作用</li><li>先执行外部的钩子函数，再执行内部的钩子函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>formily-QA</title>
      <link href="/2021/12/10/formily-QA/"/>
      <url>/2021/12/10/formily-QA/</url>
      
        <content type="html"><![CDATA[<p>formily 是一个庞大且复杂的框架，且日常维护者也仅有几个，具有一定的学习成本，也有不少 bugs。因此在次设置一个文档用于记录问题和查询解决方案。</p><h1 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h1><h2 id="1-为什么我改了-SchemaForm-的-initialValues-但不起作用？"><a href="#1-为什么我改了-SchemaForm-的-initialValues-但不起作用？" class="headerlink" title="1. 为什么我改了 SchemaForm 的 initialValues 但不起作用？"></a>1. 为什么我改了 SchemaForm 的 initialValues 但不起作用？</h2><p><code>initialValues</code> 主要用于异步默认值场景，兼容同步默认值，只要在第 N 次渲染，某个字段还没被设置默认值，第 N+1 次渲染，就可以给其设置默认值</p><h2 id="表单样式不符合？"><a href="#表单样式不符合？" class="headerlink" title="表单样式不符合？"></a>表单样式不符合？</h2><p>Formily 所使用的是 antd 的样式。</p><p>可以通过传 <code>x-components-props: &#123; style: &#123;&#125; &#125;</code>，在 themed 里写覆盖样式等方法来解决。<br>如果样式修改很多，可考虑将原组件重新封装，但不建议重写。</p><p>如何用同一个 schema 渲染 Web 桌面端和 Web 移动端？<br>你需要参照 packages&#x2F;src&#x2F;components&#x2F;Form&#x2F;formily&#x2F;fields&#x2F;mobile.tsx 来创建一个支持双端渲染的 Field。</p><h1 id="已知的-Bug"><a href="#已知的-Bug" class="headerlink" title="已知的 Bug"></a>已知的 Bug</h1><h2 id="1-x-components-props-无法传递-moment-object"><a href="#1-x-components-props-无法传递-moment-object" class="headerlink" title="1. x-components-props 无法传递 moment object"></a>1. x-components-props 无法传递 moment object</h2><p>建议直传 Date</p><h2 id="2-自定义校验规则不能直接使用-x-rules-39-yourCustomRuleName-39"><a href="#2-自定义校验规则不能直接使用-x-rules-39-yourCustomRuleName-39" class="headerlink" title="2. 自定义校验规则不能直接使用 x-rules: &#39;yourCustomRuleName&#39;"></a>2. 自定义校验规则不能直接使用 <code>x-rules: &#39;yourCustomRuleName&#39;</code></h2><p>必须用 <code>x-rules: &#123; yourCustomRuleName: true &#125;</code></p><h2 id="使用-select-始终导出数组"><a href="#使用-select-始终导出数组" class="headerlink" title="使用 select 始终导出数组"></a>使用 select 始终导出数组</h2><p>单选型的情况下尽量使用 <code>Field &#123; type: &#39;string&#39;, enums: [], &#125;</code>，而不是 <code>select。</code></p><h2 id="选项型的-initialValues-会被清空"><a href="#选项型的-initialValues-会被清空" class="headerlink" title="选项型的 initialValues 会被清空"></a>选项型的 initialValues 会被清空</h2><p>当 <code>initialValues</code> 的里存在有值的选项型，同时 <code>Schema</code> 尚未完全加载完毕（通常选项型对应的选项（Enum）是异步加载的，Schema 会经历一个初始化到逐渐加载完毕的过程）。那么在这个时候，Formily 会过滤掉无效的设置，导致 <code>FormState.initialValues</code> 的选项会被清空。</p><p>如果你需要完整的 <code>initialValues</code>，要么保存传入 <code>initialValues</code> 的接口数据，要么在 <code>Schema</code> 完全加载完毕后再渲染表单。</p><h2 id="x-component-props-无法传递将来可能会变化的值，如数组-index"><a href="#x-component-props-无法传递将来可能会变化的值，如数组-index" class="headerlink" title="x-component-props 无法传递将来可能会变化的值，如数组 index"></a>x-component-props 无法传递将来可能会变化的值，如数组 index</h2>]]></content>
      
      
      <categories>
          
          <category> formily </category>
          
      </categories>
      
      
        <tags>
            
            <tag> formily </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
